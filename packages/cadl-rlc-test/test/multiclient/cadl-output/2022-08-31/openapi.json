{
  "swagger": "2.0",
  "info": {
    "title": "Contoso Widget Manager",
    "version": "2022-08-31",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [],
  "paths": {
    "/manufacturers": {
      "get": {
        "operationId": "Manufacturers_ListManufacturers",
        "description": "List Manufacturer resources",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Manufacturer"
                  },
                  "x-cadl-name": "Manufacturer[]",
                  "description": "The Manufacturer items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "description": "The link to the next page of items",
                  "format": "uri",
                  "x-cadl-name": "Rest.ResourceLocation<Manufacturer>"
                }
              },
              "description": "Paged collection of Manufacturer items",
              "required": [
                "value"
              ],
              "x-cadl-name": "Azure.Core.Foundations.CustomPage<Manufacturer, {}>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/manufacturers/{manufacturerId}": {
      "put": {
        "operationId": "Manufacturers_CreateManufacturer",
        "description": "Creates or replaces a Manufacturer",
        "parameters": [
          {
            "name": "manufacturerId",
            "in": "path",
            "required": true,
            "description": "The manufacturer's unique ID.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The manufacturer's name."
                },
                "address": {
                  "type": "string",
                  "description": "The manufacturer's full address."
                }
              },
              "description": "The template for adding updateable properties.",
              "required": [
                "name",
                "address"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreateOrReplaceModel<Manufacturer>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The manufacturer's unique ID."
                },
                "name": {
                  "type": "string",
                  "description": "The manufacturer's name."
                },
                "address": {
                  "type": "string",
                  "description": "The manufacturer's full address."
                },
                "etag": {
                  "type": "string",
                  "description": "The entity tag for this resource.",
                  "readOnly": true
                }
              },
              "required": [
                "id",
                "name",
                "address",
                "etag"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceOkResponse<Azure.Core.(anonymous model)>"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The manufacturer's unique ID."
                },
                "name": {
                  "type": "string",
                  "description": "The manufacturer's name."
                },
                "address": {
                  "type": "string",
                  "description": "The manufacturer's full address."
                },
                "etag": {
                  "type": "string",
                  "description": "The entity tag for this resource.",
                  "readOnly": true
                }
              },
              "description": "A  resource was successfully created.",
              "required": [
                "id",
                "name",
                "address",
                "etag"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreatedResponse<Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "get": {
        "operationId": "Manufacturers_GetManufacturer",
        "description": "Get a Manufacturer",
        "parameters": [
          {
            "name": "manufacturerId",
            "in": "path",
            "required": true,
            "description": "The manufacturer's unique ID.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "ETag": {
                "description": "The entity tag for the response.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Manufacturers_DeleteManufacturer",
        "description": "Delete a Manufacturer asynchronously.",
        "parameters": [
          {
            "name": "manufacturerId",
            "in": "path",
            "required": true,
            "description": "The manufacturer's unique ID.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              },
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                }
              },
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.Foundations.AcceptedResponse<Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/manufacturers/{manufacturerId}/operations/{operationId}": {
      "get": {
        "operationId": "Manufacturers_GetManufacturerOperationStatus",
        "description": "Gets status of a Manufacturer operation.",
        "parameters": [
          {
            "name": "manufacturerId",
            "in": "path",
            "required": true,
            "description": "The manufacturer's unique ID.",
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "description": "The unique ID of the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                },
                "result": {
                  "$ref": "#/definitions/Manufacturer",
                  "description": "The result of the operation."
                }
              },
              "description": "Provides status details for long running operations.",
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.ResourceOperationStatus<Manufacturer, Manufacturer, Azure.Core.Foundations.Error>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets": {
      "get": {
        "operationId": "Widgets_ListWidgets",
        "description": "List Widget resources",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SelectQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Widget"
                  },
                  "x-ms-identifiers": [],
                  "x-cadl-name": "Widget[]",
                  "description": "The Widget items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "description": "The link to the next page of items",
                  "format": "uri",
                  "x-cadl-name": "Rest.ResourceLocation<Widget>"
                }
              },
              "description": "Paged collection of Widget items",
              "required": [
                "value"
              ],
              "x-cadl-name": "Azure.Core.Foundations.CustomPage<Widget, (anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/widgets/{widgetName}": {
      "patch": {
        "operationId": "Widgets_CreateOrUpdateWidget",
        "description": "Creates or updates a Widget asynchronously",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "color": {
                  "$ref": "#/definitions/WidgetColor",
                  "description": "The widget color."
                },
                "manufacturerId": {
                  "type": "string",
                  "description": "The ID of the widget's manufacturer."
                }
              },
              "description": "The template for adding optional properties.",
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreateOrUpdateModel<Widget>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              },
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The widget name.",
                  "readOnly": true
                },
                "color": {
                  "$ref": "#/definitions/WidgetColor",
                  "description": "The widget color."
                },
                "manufacturerId": {
                  "type": "string",
                  "description": "The ID of the widget's manufacturer."
                },
                "etag": {
                  "type": "string",
                  "description": "The entity tag for this resource.",
                  "readOnly": true
                }
              },
              "required": [
                "name",
                "color",
                "manufacturerId",
                "etag"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceOkResponse<Azure.Core.(anonymous model)>"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              },
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The widget name.",
                  "readOnly": true
                },
                "color": {
                  "$ref": "#/definitions/WidgetColor",
                  "description": "The widget color."
                },
                "manufacturerId": {
                  "type": "string",
                  "description": "The ID of the widget's manufacturer."
                },
                "etag": {
                  "type": "string",
                  "description": "The entity tag for this resource.",
                  "readOnly": true
                }
              },
              "description": "A  resource was successfully created.",
              "required": [
                "name",
                "color",
                "manufacturerId",
                "etag"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreatedResponse<Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/merge-patch+json"
        ]
      },
      "get": {
        "operationId": "Widgets_GetWidget",
        "description": "Get a Widget",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "ETag": {
                "description": "The entity tag for the response.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Widgets_DeleteWidget",
        "description": "Delete a Widget asynchronously.",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              },
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                }
              },
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.Foundations.AcceptedResponse<Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetName}:scheduleRepairs": {
      "post": {
        "operationId": "Widgets_ScheduleRepairs",
        "description": "Schedule a widget for repairs.",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WidgetRepairRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/WidgetRepairRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetName}/analytics/current": {
      "get": {
        "operationId": "Widgets_GetAnalytics",
        "description": "Get a WidgetAnalytics",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/WidgetAnalytics"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "operationId": "Widgets_UpdateAnalytics",
        "description": "Creates or updates a WidgetAnalytics",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "useCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of uses of the widget."
                },
                "repairCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of times the widget was repaired."
                }
              },
              "description": "The template for adding optional properties.",
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreateOrUpdateModel<WidgetAnalytics>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "enum": [
                    "current"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  },
                  "description": "The identifier for the analytics object.  There is only one named 'current'."
                },
                "useCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of uses of the widget."
                },
                "repairCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of times the widget was repaired."
                }
              },
              "required": [
                "id",
                "useCount",
                "repairCount"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceOkResponse<Azure.Core.(anonymous model)>"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "enum": [
                    "current"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  },
                  "description": "The identifier for the analytics object.  There is only one named 'current'."
                },
                "useCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of uses of the widget."
                },
                "repairCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of times the widget was repaired."
                }
              },
              "description": "A  resource was successfully created.",
              "required": [
                "id",
                "useCount",
                "repairCount"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreatedResponse<Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/merge-patch+json"
        ]
      }
    },
    "/widgets/{widgetName}/operations/{operationId}": {
      "get": {
        "operationId": "Widgets_GetWidgetOperationStatus",
        "description": "Gets status of a Widget operation.",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "description": "The unique ID of the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                },
                "result": {
                  "$ref": "#/definitions/Widget",
                  "description": "The result of the operation."
                }
              },
              "description": "Provides status details for long running operations.",
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.ResourceOperationStatus<Widget, Widget, Azure.Core.Foundations.Error>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetName}/parts": {
      "post": {
        "operationId": "WidgetParts_CreateWidgetPart",
        "description": "Creates a WidgetPart",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "partId": {
                  "type": "string",
                  "description": "The ID to use for reordering the part."
                },
                "manufacturerId": {
                  "type": "string",
                  "description": "The ID of the part's manufacturer."
                }
              },
              "description": "The template for adding updateable properties.",
              "required": [
                "partId",
                "manufacturerId"
              ],
              "x-cadl-name": "Azure.Core.Foundations.ResourceCreateOrReplaceModel<WidgetPart>"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "headers": {
              "Location": {
                "description": "The location of an instance of WidgetPart",
                "type": "string",
                "format": "uri"
              },
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "get": {
        "operationId": "WidgetParts_ListWidgetParts",
        "description": "List WidgetPart resources",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WidgetPart"
                  },
                  "x-ms-identifiers": [],
                  "x-cadl-name": "WidgetPart[]",
                  "description": "The WidgetPart items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "description": "The link to the next page of items",
                  "format": "uri",
                  "x-cadl-name": "Rest.ResourceLocation<WidgetPart>"
                }
              },
              "description": "Paged collection of WidgetPart items",
              "required": [
                "value"
              ],
              "x-cadl-name": "Azure.Core.Foundations.CustomPage<WidgetPart, {}>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/widgets/{widgetName}/parts/{widgetPartName}": {
      "get": {
        "operationId": "WidgetParts_GetWidgetPart",
        "description": "Get a WidgetPart",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "name": "widgetPartName",
            "in": "path",
            "required": true,
            "description": "The name of the part.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "ETag": {
                "description": "The entity tag for the response.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WidgetPart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "WidgetParts_DeleteWidgetPart",
        "description": "Delete a WidgetPart",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "name": "widgetPartName",
            "in": "path",
            "required": true,
            "description": "The name of the part.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "Repeatability-Result": {
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ]
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetName}/parts/{widgetPartName}/operations/{operationId}": {
      "get": {
        "operationId": "WidgetParts_GetWidgetPartOperationStatus",
        "description": "Gets status of a WidgetPart operation.",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "name": "widgetPartName",
            "in": "path",
            "required": true,
            "description": "The name of the part.",
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "description": "The unique ID of the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                },
                "result": {
                  "$ref": "#/definitions/WidgetPart",
                  "description": "The result of the operation."
                }
              },
              "description": "Provides status details for long running operations.",
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.ResourceOperationStatus<WidgetPart, WidgetPart, Azure.Core.Foundations.Error>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetName}/parts:reorderParts": {
      "post": {
        "operationId": "WidgetParts_ReorderParts",
        "description": "Reorder all parts for the widget.",
        "parameters": [
          {
            "name": "widgetName",
            "in": "path",
            "required": true,
            "description": "The widget name.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WidgetPartReorderRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                },
                "result": {
                  "$ref": "#/definitions/Http.AcceptedResponse",
                  "description": "The result of the operation."
                }
              },
              "description": "Provides status details for long running operations.",
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.ResourceOperationStatus<WidgetPart, Http.AcceptedResponse, Azure.Core.Foundations.Error>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/widgets/{widgetId}/repairs/{operationId}": {
      "get": {
        "operationId": "Widgets_GetRepairStatus",
        "description": "Get the status of a WidgetRepairRequest.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "description": "The unique ID of the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/WidgetRepairStatusParams"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                },
                "result": {
                  "$ref": "#/definitions/WidgetRepairRequest",
                  "description": "The result of the operation."
                }
              },
              "description": "Provides status details for long running operations.",
              "required": [
                "id",
                "status"
              ],
              "x-cadl-name": "Azure.Core.Foundations.OperationStatus<WidgetRepairRequest, Azure.Core.Foundations.Error>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of details about specific errors that led to this reported error."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "description": "The error object.",
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "A response containing error details.",
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      },
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "required": [
        "code"
      ]
    },
    "Azure.Core.Foundations.OperationState": {
      "type": "string",
      "enum": [
        "InProgress",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "OperationState",
        "modelAsString": true
      }
    },
    "Clients": {
      "type": "string",
      "enum": [
        "WidgetClient",
        "PartsClient"
      ],
      "x-ms-enum": {
        "name": "Clients",
        "modelAsString": false
      }
    },
    "Http.AcceptedResponse": {
      "type": "object",
      "properties": {}
    },
    "Manufacturer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The manufacturer's unique ID."
        },
        "name": {
          "type": "string",
          "description": "The manufacturer's name."
        },
        "address": {
          "type": "string",
          "description": "The manufacturer's full address."
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "readOnly": true
        }
      },
      "description": "A manufacturer of widgets.",
      "required": [
        "id",
        "name",
        "address",
        "etag"
      ]
    },
    "Versions": {
      "type": "string",
      "enum": [
        "2022-08-31"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": false,
        "values": [
          {
            "name": "v2022_08_31",
            "value": "2022-08-31"
          }
        ]
      }
    },
    "Widget": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The widget name.",
          "readOnly": true
        },
        "color": {
          "$ref": "#/definitions/WidgetColor",
          "description": "The widget color."
        },
        "manufacturerId": {
          "type": "string",
          "description": "The ID of the widget's manufacturer."
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "readOnly": true
        }
      },
      "description": "A widget.",
      "required": [
        "name",
        "color",
        "manufacturerId",
        "etag"
      ]
    },
    "WidgetAnalytics": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "enum": [
            "current"
          ],
          "x-ms-enum": {
            "modelAsString": false
          },
          "description": "The identifier for the analytics object.  There is only one named 'current'."
        },
        "useCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of uses of the widget."
        },
        "repairCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of times the widget was repaired."
        }
      },
      "description": "Provides analytics about the use and maintenance of a Widget.",
      "required": [
        "id",
        "useCount",
        "repairCount"
      ]
    },
    "WidgetColor": {
      "type": "string",
      "description": "The color of a widget.",
      "enum": [
        "Black",
        "White",
        "Red",
        "Green",
        "Blue"
      ],
      "x-ms-enum": {
        "name": "WidgetColor",
        "modelAsString": true
      }
    },
    "WidgetColorValues": {
      "type": "string",
      "enum": [
        "Black",
        "White",
        "Red",
        "Green",
        "Blue"
      ],
      "x-ms-enum": {
        "name": "WidgetColorValues",
        "modelAsString": false
      }
    },
    "WidgetPart": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the part.",
          "readOnly": true
        },
        "partId": {
          "type": "string",
          "description": "The ID to use for reordering the part."
        },
        "manufacturerId": {
          "type": "string",
          "description": "The ID of the part's manufacturer."
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "readOnly": true
        }
      },
      "description": "A widget's part.",
      "required": [
        "name",
        "partId",
        "manufacturerId",
        "etag"
      ]
    },
    "WidgetPartReorderRequest": {
      "type": "object",
      "properties": {
        "signedOffBy": {
          "type": "string",
          "description": "Identifies who signed off the reorder request."
        }
      },
      "description": "The details of a reorder request for a WidgetPart.",
      "required": [
        "signedOffBy"
      ]
    },
    "WidgetRepairRequest": {
      "type": "object",
      "properties": {
        "requestState": {
          "$ref": "#/definitions/WidgetRepairState",
          "description": "The state of the widget repair request."
        },
        "scheduledDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the repair is scheduled to occur."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the request was created."
        },
        "updatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the request was updated."
        },
        "completedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the request was completed."
        }
      },
      "description": "A submitted repair request for a widget.",
      "required": [
        "requestState",
        "scheduledDateTime",
        "createdDateTime",
        "updatedDateTime",
        "completedDateTime"
      ]
    },
    "WidgetRepairState": {
      "type": "string",
      "description": "The repair state of a widget.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "SentToManufacturer"
      ],
      "x-ms-enum": {
        "name": "WidgetRepairState",
        "modelAsString": true
      }
    },
    "WidgetRepairStateValues": {
      "type": "string",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "SentToManufacturer"
      ],
      "x-ms-enum": {
        "name": "WidgetRepairStateValues",
        "modelAsString": false
      }
    },
    "WidgetRepairStatusParams": {
      "type": "object",
      "properties": {},
      "description": "The parameters for a widget status request"
    }
  },
  "parameters": {
    "Azure.Core.ConditionalRequestHeaders.ifMatch": {
      "name": "ifMatch",
      "in": "header",
      "required": false,
      "description": "The request should only proceed if an entity matches this string.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.ConditionalRequestHeaders.ifModifiedSince": {
      "name": "ifModifiedSince",
      "in": "header",
      "required": false,
      "description": "The request should only proceed if the entity was modified after this time.",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.ConditionalRequestHeaders.ifNoneMatch": {
      "name": "ifNoneMatch",
      "in": "header",
      "required": false,
      "description": "The request should only proceed if no entity matches this string.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince": {
      "name": "ifUnmodifiedSince",
      "in": "header",
      "required": false,
      "description": "The request should only proceed if the entity was not modified after this time.",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "required": false,
      "description": "The maximum number of result items per page.",
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent": {
      "name": "repeatabilityFirstSent",
      "in": "header",
      "required": false,
      "description": "Specifies the date and time at which the request was first created.",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId": {
      "name": "repeatabilityRequestId",
      "in": "header",
      "required": false,
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SelectQueryParameter": {
      "name": "select",
      "in": "query",
      "required": false,
      "description": "Select the specified fields to be included in the response.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "required": false,
      "description": "The number of result items to skip.",
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "required": false,
      "description": "The number of result items to return.",
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "WidgetRepairStatusParams": {
      "name": "widgetId",
      "in": "path",
      "required": true,
      "description": "The ID of the widget being repaired.",
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
