// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import * as prettier from "prettier";
import { CodeModel } from "@azure-tools/codemodel";
import { Project, IndentationText } from "ts-morph";
import { Host } from "@azure-tools/autorest-extension-base";
import { generateClient } from "./generators/clientFileGenerator";
import { generateClientContext } from "./generators/clientContextFileGenerator";
import { generateModels } from "./generators/modelsGenerator";
import { generateMappers } from "./generators/mappersGenerator";
import { generatePackageJson } from "./generators/static/packageFileGenerator";
import { transformCodeModel } from "./transforms";
import { PackageDetails } from "./models/packageDetails";

const prettierTypeScriptOptions: prettier.Options = {
  parser: "typescript",
  arrowParens: "always",
  bracketSpacing: true,
  endOfLine: "lf",
  printWidth: 100,
  semi: true,
  singleQuote: false,
  tabWidth: 2
};

const prettierJSONOptions: prettier.Options = {
  parser: "json",
  tabWidth: 2,
  semi: false,
  singleQuote: false
};

export class TypescriptGenerator {
  private codeModel: CodeModel;
  private host: Host;

  constructor(codeModel: CodeModel, host: Host) {
    this.codeModel = codeModel;
    this.host = host;
  }

  public async process(): Promise<void> {
    const project = new Project({
      useVirtualFileSystem: true,
      manipulationSettings: {
        indentationText: IndentationText.TwoSpaces
      }
    });

    const clientDetails = transformCodeModel(this.codeModel);
    const packageDetails: PackageDetails = {
      name: await this.host.GetValue("package-name"),
      version: await this.host.GetValue("package-version")
    };

    if ((await this.host.GetValue("generate-metadata")) !== false) {
      generatePackageJson(clientDetails, packageDetails, project);
    }

    generateClient(clientDetails, project);
    generateClientContext(clientDetails, packageDetails, project);
    generateModels(this.codeModel, project);
    generateMappers(this.codeModel, project);

    // TODO: Get this from the "license-header" setting:
    //   await this.host.GetValue("license-header");
    const licenseHeader = `
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
`;

    // Save the source files to the virtual filesystem
    project.saveSync();
    const fs = project.getFileSystem();

    // Loop over the files
    for (const file of project.getSourceFiles()) {
      const filePath = file.getFilePath();
      const isJson = /\.json$/gi.test(filePath);
      const isSourceCode = /\.(ts|js)$/gi.test(filePath);
      let fileContents = fs.readFileSync(filePath);

      // Add the license header to source code files
      if (licenseHeader && isSourceCode) {
        fileContents = `${licenseHeader.trimLeft()}\n${fileContents}`;
      }

      // Format the contents if necessary
      if (isJson || isSourceCode) {
        fileContents = prettier.format(
          fileContents,
          isJson ? prettierJSONOptions : prettierTypeScriptOptions
        );
      }

      // Write the file to the AutoRest host
      this.host.WriteFile(
        filePath.substr(1), // Get rid of the leading slash '/'
        fileContents
      );
    }
  }
}
