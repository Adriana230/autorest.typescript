@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.TypeScript
@using AutoRest.TypeScript.Model
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodTS>
// Send Request
httpRequest.rawResponse = true;
let operationRes: msRest.HttpOperationResponse;
try {
  operationRes = await client.sendOperationRequest(
    httpRequest,
    {
      arguments: {
@foreach (Parameter parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header || p.Location == ParameterLocation.Path || p.Location == ParameterLocation.Query))
{
<text>
        "@(parameter.Name)": @(parameter.Name),
</text>
}
      },
      customHeaders: new msRest.HttpHeaders(options && options.customHeaders)
    },
    {
      httpMethod: "@(Model.HttpMethod.ToString().ToUpper())",
@if (Model.IsAbsoluteUrl)
{
<text>
      baseUrl: "@(Model.Url)",
</text>
}
else
{
<text>
      baseUrl: @(Model.ClientReference).baseUri,
      path: "@(Model.Url)",
</text>
}
@if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.Path))
{
<text>
      urlParameters: [
@foreach (ParameterTS pathParameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Path))
{
<text>
        {
          parameterName: "@(pathParameter.Name)",
@if (pathParameter.Name != pathParameter.SerializedName)
{
<text>
          urlParameterName: "@(pathParameter.SerializedName)",
</text>
}
@if (pathParameter.OperationType != null)
{
<text>
          type: msRest.OperationParameterType.@(pathParameter.OperationType),
</text>
}
        },
</text>
}
      ],
</text>
}
@if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.Query))
{
<text>
      queryParameters: [
@foreach (ParameterTS queryParameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Query))
{
<text>
        {
          parameterName: "@(queryParameter.Name)",
@if (queryParameter.Name != queryParameter.SerializedName)
{
<text>
          queryParameterName: "@(queryParameter.SerializedName)",
</text>
}
@if (queryParameter.SkipUrlEncoding())
{
<text>
          skipEncoding: true,
</text>
}
@if (queryParameter.CollectionFormat != CollectionFormat.None)
{
<text>
          collectionFormat: "@(queryParameter.CollectionFormat)"
</text>
}
        },
</text>
}
      ],
</text>
}
@if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.Header))
{
<text>
      headerParameters: [
@foreach (ParameterTS parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
{
<text>
        {
          parameterName: "@(parameter.Name)",
@if (parameter.Name != parameter.SerializedName)
{
<text>
          headerName: "@(parameter.SerializedName)",
</text>
}
@if (parameter.OperationType != null)
{
<text>
          type: msRest.OperationParameterType.@(parameter.OperationType),
</text>    
}
        },
</text>
}
      ],
</text>
}
    });
  let statusCode = operationRes.status;
  @EmptyLine
  if (@(Model.FailureStatusCodePredicate)) {
    let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
    error.statusCode = operationRes.status;
    error.request = msRest.stripRequest(httpRequest);
    error.response = msRest.stripResponse(operationRes);
    let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
    try {
      if (parsedErrorResponse) {
        @(Model.PopulateErrorCodeAndMessage())
      }
  @if (Model.DefaultResponse.Body != null)
  {
      var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "error.body", "parsedErrorResponse");
      if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
      {
@:      if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
@:        @(deserializeErrorBody)
@:      }
      }
  }
    } catch (defaultError) {
      error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                       `- "${operationRes.bodyAsText}" for the default response.`;
      return Promise.reject(error);
    }
    @EmptyLine
    return Promise.reject(error);
  }
@EmptyLine
} catch(error) {
  return Promise.reject(error);
}
@EmptyLine
return Promise.resolve(operationRes);