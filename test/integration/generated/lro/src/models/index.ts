/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface Resource {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource Type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  /** Resource Location */
  location?: string;
  /**
   * Resource Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

export interface CloudError {
  code?: number;
  message?: string;
}

export interface Sku {
  name?: string;
  id?: string;
}

export interface SubResource {
  /**
   * Sub Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

export interface OperationResult {
  /** The status of the request */
  status?: OperationResultStatus;
  error?: OperationResultError;
}

export interface OperationResultError {
  /** The error code for an operation failure */
  code?: number;
  /** The detailed arror message */
  message?: string;
}

export type Product = Resource & {
  provisioningState?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningStateValues?: ProductPropertiesProvisioningStateValues;
};

export type SubProduct = SubResource & {
  provisioningState?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningStateValues?: SubProductPropertiesProvisioningStateValues;
};

/** Defines headers for LrOS_patch200SucceededIgnoreHeaders operation. */
export interface LrOSPatch200SucceededIgnoreHeaders {
  /** This header should be ignored in this case */
  azureAsyncOperation?: string;
}

/** Defines headers for LrOS_post202List operation. */
export interface LrOSPost202ListHeaders {
  /** Location to poll for result status: will be set to /lro/list/pollingGet */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/list/finalGet */
  location?: string;
}

/** Defines headers for LrOS_putNoHeaderInRetry operation. */
export interface LrOSPutNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noheader/202/200/operationResults */
  location?: string;
}

/** Defines headers for LrOS_putAsyncRetrySucceeded operation. */
export interface LrOSPutAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_putAsyncNoRetrySucceeded operation. */
export interface LrOSPutAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noretry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/noretry/succeeded/operationResults/200 */
  location?: string;
}

/** Defines headers for LrOS_putAsyncRetryFailed operation. */
export interface LrOSPutAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_putAsyncNoRetrycanceled operation. */
export interface LrOSPutAsyncNoRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/noretry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/noretry/canceled/operationResults/200 */
  location?: string;
}

/** Defines headers for LrOS_putAsyncNoHeaderInRetry operation. */
export interface LrOSPutAsyncNoHeaderInRetryHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for LrOS_deleteProvisioning202Accepted200Succeeded operation. */
export interface LrOSDeleteProvisioning202Accepted200SucceededHeaders {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/accepted/200/succeeded */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteProvisioning202DeletingFailed200 operation. */
export interface LrOSDeleteProvisioning202DeletingFailed200Headers {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/deleting/200/failed */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteProvisioning202Deletingcanceled200 operation. */
export interface LrOSDeleteProvisioning202Deletingcanceled200Headers {
  /** Location to poll for result status: will be set to /lro/delete/provisioning/202/deleting/200/canceled */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_delete202Retry200 operation. */
export interface LrOSDelete202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_delete202NoRetry204 operation. */
export interface LrOSDelete202NoRetry204Headers {
  /** Location to poll for result status: will be set to /lro/delete/202/noretry/204 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteNoHeaderInRetry operation. */
export interface LrOSDeleteNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/put/noheader/202/204/operationresults */
  location?: string;
}

/** Defines headers for LrOS_deleteAsyncNoHeaderInRetry operation. */
export interface LrOSDeleteAsyncNoHeaderInRetryHeaders {
  /** Location to poll for result status: will be set to /lro/put/noheader/202/204/operationresults */
  location?: string;
}

/** Defines headers for LrOS_deleteAsyncRetrySucceeded operation. */
export interface LrOSDeleteAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteAsyncNoRetrySucceeded operation. */
export interface LrOSDeleteAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/noretry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/noretry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteAsyncRetryFailed operation. */
export interface LrOSDeleteAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_deleteAsyncRetrycanceled operation. */
export interface LrOSDeleteAsyncRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/canceled/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_post202Retry200 operation. */
export interface LrOSPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_post202NoRetry204 operation. */
export interface LrOSPost202NoRetry204Headers {
  /** Location to poll for result status: will be set to /lro/post/202/noretry/204 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_postAsyncRetrySucceeded operation. */
export interface LrOSPostAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_postAsyncNoRetrySucceeded operation. */
export interface LrOSPostAsyncNoRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_postAsyncRetryFailed operation. */
export interface LrOSPostAsyncRetryFailedHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOS_postAsyncRetrycanceled operation. */
export interface LrOSPostAsyncRetrycanceledHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/canceled/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/canceled/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_putAsyncRelativeRetrySucceeded operation. */
export interface LroRetrysPutAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_deleteProvisioning202Accepted200Succeeded operation. */
export interface LroRetrysDeleteProvisioning202Accepted200SucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/provisioning/202/accepted/200/succeeded */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_delete202Retry200 operation. */
export interface LroRetrysDelete202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_deleteAsyncRelativeRetrySucceeded operation. */
export interface LroRetrysDeleteAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_post202Retry200 operation. */
export interface LroRetrysPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LroRetrys_postAsyncRelativeRetrySucceeded operation. */
export interface LroRetrysPostAsyncRelativeRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/retryerror/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetry400 operation. */
export interface LrosaDsPutAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteNonRetry400 operation. */
export interface LrosaDsDeleteNonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_delete202NonRetry400 operation. */
export interface LrosaDsDelete202NonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/delete/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetry400 operation. */
export interface LrosaDsDeleteAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/deleteasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/deleteasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postNonRetry400 operation. */
export interface LrosaDsPostNonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202NonRetry400 operation. */
export interface LrosaDsPost202NonRetry400Headers {
  /** Location to poll for result status: will be set to /lro/retryerror/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetry400 operation. */
export interface LrosaDsPostAsyncRelativeRetry400Headers {
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/nonretryerror/putasync/retry/operationResults/400 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryNoStatus operation. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryNoStatusPayload operation. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryNoStatus operation. */
export interface LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders {
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/deleteasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202NoLocation operation. */
export interface LrosaDsPost202NoLocationHeaders {
  /** Location to poll for result status: will not be set */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryNoPayload operation. */
export interface LrosaDsPostAsyncRelativeRetryNoPayloadHeaders {
  /** Location to poll for result status: will be set to /lro/error/putasync/retry/failed/operationResults/nopayload */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/putasync/retry/failed/operationResults/nopayload */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_putAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/putasync/retry/failed/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_delete202RetryInvalidHeader operation. */
export interface LrosaDsDelete202RetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_deleteAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/error/deleteasync/retry/failed/operationResults/invalidjsonpolling */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/deleteasync/retry/failed/operationResults/invalidjsonpolling */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_post202RetryInvalidHeader operation. */
export interface LrosaDsPost202RetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to /foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryInvalidHeader operation. */
export interface LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders {
  /** Location to poll for result status: will be set to foo */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to foo */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to /bar */
  retryAfter?: number;
}

/** Defines headers for LrosaDs_postAsyncRelativeRetryInvalidJsonPolling operation. */
export interface LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders {
  /** Location to poll for result status: will be set to /lro/error/postasync/retry/failed/operationResults/invalidjsonpolling */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/error/postasync/retry/failed/operationResults/invalidjsonpolling */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOSCustomHeader_putAsyncRetrySucceeded operation. */
export interface LrOSCustomHeaderPutAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOSCustomHeader_post202Retry200 operation. */
export interface LrOSCustomHeaderPost202Retry200Headers {
  /** Location to poll for result status: will be set to /lro/customheader/post/202/retry/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Defines headers for LrOSCustomHeader_postAsyncRetrySucceeded operation. */
export interface LrOSCustomHeaderPostAsyncRetrySucceededHeaders {
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  azureAsyncOperation?: string;
  /** Location to poll for result status: will be set to /lro/customheader/putasync/retry/succeeded/operationResults/200 */
  location?: string;
  /** Number of milliseconds until the next poll should be sent, will be set to zero */
  retryAfter?: number;
}

/** Known values of {@link ProductPropertiesProvisioningStateValues} that the service accepts. */
export enum KnownProductPropertiesProvisioningStateValues {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "canceled",
  Accepted = "Accepted",
  Creating = "Creating",
  Created = "Created",
  Updating = "Updating",
  Updated = "Updated",
  Deleting = "Deleting",
  Deleted = "Deleted",
  OK = "OK"
}

/**
 * Defines values for ProductPropertiesProvisioningStateValues. \
 * {@link KnownProductPropertiesProvisioningStateValues} can be used interchangeably with ProductPropertiesProvisioningStateValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type ProductPropertiesProvisioningStateValues = string;

/** Known values of {@link SubProductPropertiesProvisioningStateValues} that the service accepts. */
export enum KnownSubProductPropertiesProvisioningStateValues {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "canceled",
  Accepted = "Accepted",
  Creating = "Creating",
  Created = "Created",
  Updating = "Updating",
  Updated = "Updated",
  Deleting = "Deleting",
  Deleted = "Deleted",
  OK = "OK"
}

/**
 * Defines values for SubProductPropertiesProvisioningStateValues. \
 * {@link KnownSubProductPropertiesProvisioningStateValues} can be used interchangeably with SubProductPropertiesProvisioningStateValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type SubProductPropertiesProvisioningStateValues = string;

/** Known values of {@link OperationResultStatus} that the service accepts. */
export enum KnownOperationResultStatus {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "canceled",
  Accepted = "Accepted",
  Creating = "Creating",
  Created = "Created",
  Updating = "Updating",
  Updated = "Updated",
  Deleting = "Deleting",
  Deleted = "Deleted",
  OK = "OK"
}

/**
 * Defines values for OperationResultStatus. \
 * {@link KnownOperationResultStatus} can be used interchangeably with OperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **canceled** \
 * **Accepted** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **OK**
 */
export type OperationResultStatus = string;

/** Optional parameters. */
export interface LrOSPut200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200Succeeded operation. */
export type LrOSPut200SucceededResponse = Product;

/** Optional parameters. */
export interface LrOSPatch200SucceededIgnoreHeadersOptionalParams
  extends coreClient.OperationOptions {
  /** Product to patch */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patch200SucceededIgnoreHeaders operation. */
export type LrOSPatch200SucceededIgnoreHeadersResponse = LrOSPatch200SucceededIgnoreHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPut201SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201Succeeded operation. */
export type LrOSPut201SucceededResponse = Product;

/** Optional parameters. */
export interface LrOSPost202ListOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202List operation. */
export type LrOSPost202ListResponse = Product[];

/** Optional parameters. */
export interface LrOSPut200SucceededNoStateOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200SucceededNoState operation. */
export type LrOSPut200SucceededNoStateResponse = Product;

/** Optional parameters. */
export interface LrOSPut202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put202Retry200 operation. */
export type LrOSPut202Retry200Response = Product;

/** Optional parameters. */
export interface LrOSPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LrOSPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LrOSPut200UpdatingSucceeded204OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200UpdatingSucceeded204 operation. */
export type LrOSPut200UpdatingSucceeded204Response = Product;

/** Optional parameters. */
export interface LrOSPut201CreatingFailed200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingFailed200 operation. */
export type LrOSPut201CreatingFailed200Response = Product;

/** Optional parameters. */
export interface LrOSPut200Acceptedcanceled200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200Acceptedcanceled200 operation. */
export type LrOSPut200Acceptedcanceled200Response = Product;

/** Optional parameters. */
export interface LrOSPutNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNoHeaderInRetry operation. */
export type LrOSPutNoHeaderInRetryResponse = LrOSPutNoHeaderInRetryHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetrySucceeded operation. */
export type LrOSPutAsyncRetrySucceededResponse = LrOSPutAsyncRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoRetrySucceeded operation. */
export type LrOSPutAsyncNoRetrySucceededResponse = LrOSPutAsyncNoRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetryFailed operation. */
export type LrOSPutAsyncRetryFailedResponse = LrOSPutAsyncRetryFailedHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutAsyncNoRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoRetrycanceled operation. */
export type LrOSPutAsyncNoRetrycanceledResponse = LrOSPutAsyncNoRetrycanceledHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutAsyncNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNoHeaderInRetry operation. */
export type LrOSPutAsyncNoHeaderInRetryResponse = LrOSPutAsyncNoHeaderInRetryHeaders &
  Product;

/** Optional parameters. */
export interface LrOSPutNonResourceOptionalParams
  extends coreClient.OperationOptions {
  /** sku to put */
  sku?: Sku;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonResource operation. */
export type LrOSPutNonResourceResponse = Sku;

/** Optional parameters. */
export interface LrOSPutAsyncNonResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sku to put */
  sku?: Sku;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncNonResource operation. */
export type LrOSPutAsyncNonResourceResponse = Sku;

/** Optional parameters. */
export interface LrOSPutSubResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sub Product to put */
  product?: SubProduct;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putSubResource operation. */
export type LrOSPutSubResourceResponse = SubProduct;

/** Optional parameters. */
export interface LrOSPutAsyncSubResourceOptionalParams
  extends coreClient.OperationOptions {
  /** Sub Product to put */
  product?: SubProduct;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncSubResource operation. */
export type LrOSPutAsyncSubResourceResponse = SubProduct;

/** Optional parameters. */
export interface LrOSDeleteProvisioning202Accepted200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Accepted200Succeeded operation. */
export type LrOSDeleteProvisioning202Accepted200SucceededResponse = Product;

/** Optional parameters. */
export interface LrOSDeleteProvisioning202DeletingFailed200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202DeletingFailed200 operation. */
export type LrOSDeleteProvisioning202DeletingFailed200Response = Product;

/** Optional parameters. */
export interface LrOSDeleteProvisioning202Deletingcanceled200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Deletingcanceled200 operation. */
export type LrOSDeleteProvisioning202Deletingcanceled200Response = Product;

/** Optional parameters. */
export interface LrOSDelete204SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LrOSDelete202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202Retry200 operation. */
export type LrOSDelete202Retry200Response = Product;

/** Optional parameters. */
export interface LrOSDelete202NoRetry204OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202NoRetry204 operation. */
export type LrOSDelete202NoRetry204Response = Product;

/** Optional parameters. */
export interface LrOSDeleteNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteNoHeaderInRetry operation. */
export type LrOSDeleteNoHeaderInRetryResponse = LrOSDeleteNoHeaderInRetryHeaders;

/** Optional parameters. */
export interface LrOSDeleteAsyncNoHeaderInRetryOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncNoHeaderInRetry operation. */
export type LrOSDeleteAsyncNoHeaderInRetryResponse = LrOSDeleteAsyncNoHeaderInRetryHeaders;

/** Optional parameters. */
export interface LrOSDeleteAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetrySucceeded operation. */
export type LrOSDeleteAsyncRetrySucceededResponse = LrOSDeleteAsyncRetrySucceededHeaders;

/** Optional parameters. */
export interface LrOSDeleteAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncNoRetrySucceeded operation. */
export type LrOSDeleteAsyncNoRetrySucceededResponse = LrOSDeleteAsyncNoRetrySucceededHeaders;

/** Optional parameters. */
export interface LrOSDeleteAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetryFailed operation. */
export type LrOSDeleteAsyncRetryFailedResponse = LrOSDeleteAsyncRetryFailedHeaders;

/** Optional parameters. */
export interface LrOSDeleteAsyncRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRetrycanceled operation. */
export type LrOSDeleteAsyncRetrycanceledResponse = LrOSDeleteAsyncRetrycanceledHeaders;

/** Optional parameters. */
export interface LrOSPost200WithPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post200WithPayload operation. */
export type LrOSPost200WithPayloadResponse = Sku;

/** Optional parameters. */
export interface LrOSPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LrOSPost202Retry200Response = LrOSPost202Retry200Headers;

/** Optional parameters. */
export interface LrOSPost202NoRetry204OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NoRetry204 operation. */
export type LrOSPost202NoRetry204Response = LrOSPost202NoRetry204Headers &
  Product;

/** Optional parameters. */
export interface LrOSPostDoubleHeadersFinalLocationGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalLocationGet operation. */
export type LrOSPostDoubleHeadersFinalLocationGetResponse = Product;

/** Optional parameters. */
export interface LrOSPostDoubleHeadersFinalAzureHeaderGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalAzureHeaderGet operation. */
export type LrOSPostDoubleHeadersFinalAzureHeaderGetResponse = Product;

/** Optional parameters. */
export interface LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postDoubleHeadersFinalAzureHeaderGetDefault operation. */
export type LrOSPostDoubleHeadersFinalAzureHeaderGetDefaultResponse = Product;

/** Optional parameters. */
export interface LrOSPostAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrySucceeded operation. */
export type LrOSPostAsyncRetrySucceededResponse = Product;

/** Optional parameters. */
export interface LrOSPostAsyncNoRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncNoRetrySucceeded operation. */
export type LrOSPostAsyncNoRetrySucceededResponse = Product;

/** Optional parameters. */
export interface LrOSPostAsyncRetryFailedOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetryFailed operation. */
export type LrOSPostAsyncRetryFailedResponse = LrOSPostAsyncRetryFailedHeaders;

/** Optional parameters. */
export interface LrOSPostAsyncRetrycanceledOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrycanceled operation. */
export type LrOSPostAsyncRetrycanceledResponse = LrOSPostAsyncRetrycanceledHeaders;

/** Optional parameters. */
export interface LroRetrysPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LroRetrysPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LroRetrysPutAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetrySucceeded operation. */
export type LroRetrysPutAsyncRelativeRetrySucceededResponse = LroRetrysPutAsyncRelativeRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LroRetrysDeleteProvisioning202Accepted200SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteProvisioning202Accepted200Succeeded operation. */
export type LroRetrysDeleteProvisioning202Accepted200SucceededResponse = Product;

/** Optional parameters. */
export interface LroRetrysDelete202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202Retry200 operation. */
export type LroRetrysDelete202Retry200Response = LroRetrysDelete202Retry200Headers;

/** Optional parameters. */
export interface LroRetrysDeleteAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetrySucceeded operation. */
export type LroRetrysDeleteAsyncRelativeRetrySucceededResponse = LroRetrysDeleteAsyncRelativeRetrySucceededHeaders;

/** Optional parameters. */
export interface LroRetrysPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LroRetrysPost202Retry200Response = LroRetrysPost202Retry200Headers;

/** Optional parameters. */
export interface LroRetrysPostAsyncRelativeRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetrySucceeded operation. */
export type LroRetrysPostAsyncRelativeRetrySucceededResponse = LroRetrysPostAsyncRelativeRetrySucceededHeaders;

/** Optional parameters. */
export interface LrosaDsPutNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry400 operation. */
export type LrosaDsPutNonRetry400Response = Product;

/** Optional parameters. */
export interface LrosaDsPutNonRetry201Creating400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry201Creating400 operation. */
export type LrosaDsPutNonRetry201Creating400Response = Product;

/** Optional parameters. */
export interface LrosaDsPutNonRetry201Creating400InvalidJsonOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putNonRetry201Creating400InvalidJson operation. */
export type LrosaDsPutNonRetry201Creating400InvalidJsonResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetry400 operation. */
export type LrosaDsPutAsyncRelativeRetry400Response = LrosaDsPutAsyncRelativeRetry400Headers &
  Product;

/** Optional parameters. */
export interface LrosaDsDeleteNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteNonRetry400 operation. */
export type LrosaDsDeleteNonRetry400Response = LrosaDsDeleteNonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsDelete202NonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202NonRetry400 operation. */
export type LrosaDsDelete202NonRetry400Response = LrosaDsDelete202NonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetry400 operation. */
export type LrosaDsDeleteAsyncRelativeRetry400Response = LrosaDsDeleteAsyncRelativeRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPostNonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postNonRetry400 operation. */
export type LrosaDsPostNonRetry400Response = LrosaDsPostNonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPost202NonRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NonRetry400 operation. */
export type LrosaDsPost202NonRetry400Response = LrosaDsPost202NonRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetry400OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetry400 operation. */
export type LrosaDsPostAsyncRelativeRetry400Response = LrosaDsPostAsyncRelativeRetry400Headers;

/** Optional parameters. */
export interface LrosaDsPutError201NoProvisioningStatePayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putError201NoProvisioningStatePayload operation. */
export type LrosaDsPutError201NoProvisioningStatePayloadResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryNoStatus operation. */
export type LrosaDsPutAsyncRelativeRetryNoStatusResponse = LrosaDsPutAsyncRelativeRetryNoStatusHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryNoStatusPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryNoStatusPayload operation. */
export type LrosaDsPutAsyncRelativeRetryNoStatusPayloadResponse = LrosaDsPutAsyncRelativeRetryNoStatusPayloadHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsDelete204SucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryNoStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryNoStatus operation. */
export type LrosaDsDeleteAsyncRelativeRetryNoStatusResponse = LrosaDsDeleteAsyncRelativeRetryNoStatusHeaders;

/** Optional parameters. */
export interface LrosaDsPost202NoLocationOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202NoLocation operation. */
export type LrosaDsPost202NoLocationResponse = LrosaDsPost202NoLocationHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryNoPayloadOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryNoPayload operation. */
export type LrosaDsPostAsyncRelativeRetryNoPayloadResponse = LrosaDsPostAsyncRelativeRetryNoPayloadHeaders;

/** Optional parameters. */
export interface LrosaDsPut200InvalidJsonOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put200InvalidJson operation. */
export type LrosaDsPut200InvalidJsonResponse = Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsPutAsyncRelativeRetryInvalidHeaderResponse = LrosaDsPutAsyncRelativeRetryInvalidHeaderHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsPutAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsPutAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsPutAsyncRelativeRetryInvalidJsonPollingHeaders &
  Product;

/** Optional parameters. */
export interface LrosaDsDelete202RetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete202RetryInvalidHeader operation. */
export type LrosaDsDelete202RetryInvalidHeaderResponse = LrosaDsDelete202RetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsDeleteAsyncRelativeRetryInvalidHeaderResponse = LrosaDsDeleteAsyncRelativeRetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deleteAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders;

/** Optional parameters. */
export interface LrosaDsPost202RetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202RetryInvalidHeader operation. */
export type LrosaDsPost202RetryInvalidHeaderResponse = LrosaDsPost202RetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryInvalidHeaderOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryInvalidHeader operation. */
export type LrosaDsPostAsyncRelativeRetryInvalidHeaderResponse = LrosaDsPostAsyncRelativeRetryInvalidHeaderHeaders;

/** Optional parameters. */
export interface LrosaDsPostAsyncRelativeRetryInvalidJsonPollingOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRelativeRetryInvalidJsonPolling operation. */
export type LrosaDsPostAsyncRelativeRetryInvalidJsonPollingResponse = LrosaDsPostAsyncRelativeRetryInvalidJsonPollingHeaders;

/** Optional parameters. */
export interface LrOSCustomHeaderPutAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putAsyncRetrySucceeded operation. */
export type LrOSCustomHeaderPutAsyncRetrySucceededResponse = LrOSCustomHeaderPutAsyncRetrySucceededHeaders &
  Product;

/** Optional parameters. */
export interface LrOSCustomHeaderPut201CreatingSucceeded200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put201CreatingSucceeded200 operation. */
export type LrOSCustomHeaderPut201CreatingSucceeded200Response = Product;

/** Optional parameters. */
export interface LrOSCustomHeaderPost202Retry200OptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post202Retry200 operation. */
export type LrOSCustomHeaderPost202Retry200Response = LrOSCustomHeaderPost202Retry200Headers;

/** Optional parameters. */
export interface LrOSCustomHeaderPostAsyncRetrySucceededOptionalParams
  extends coreClient.OperationOptions {
  /** Product to put */
  product?: Product;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the postAsyncRetrySucceeded operation. */
export type LrOSCustomHeaderPostAsyncRetrySucceededResponse = LrOSCustomHeaderPostAsyncRetrySucceededHeaders;

/** Optional parameters. */
export interface LroClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  Host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
