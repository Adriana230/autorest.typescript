/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { LROPoller } from "../lro";
import {
  LRORetrysPut201CreatingSucceeded200OptionalParams,
  LRORetrysPut201CreatingSucceeded200Response,
  LRORetrysPutAsyncRelativeRetrySucceededOptionalParams,
  LRORetrysPutAsyncRelativeRetrySucceededResponse,
  LRORetrysDeleteProvisioning202Accepted200SucceededResponse,
  LRORetrysDelete202Retry200Response,
  LRORetrysDeleteAsyncRelativeRetrySucceededResponse,
  LRORetrysPost202Retry200OptionalParams,
  LRORetrysPost202Retry200Response,
  LRORetrysPostAsyncRelativeRetrySucceededOptionalParams,
  LRORetrysPostAsyncRelativeRetrySucceededResponse
} from "../models";

/** Interface representing a LRORetrys. */
export interface LRORetrys {
  /**
   * Long running put request, service returns a 500, then a 201 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  put201CreatingSucceeded200(
    options?: LRORetrysPut201CreatingSucceeded200OptionalParams
  ): Promise<LROPoller<LRORetrysPut201CreatingSucceeded200Response>>;
  /**
   * Long running put request, service returns a 500, then a 200 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  putAsyncRelativeRetrySucceeded(
    options?: LRORetrysPutAsyncRelativeRetrySucceededOptionalParams
  ): Promise<LROPoller<LRORetrysPutAsyncRelativeRetrySucceededResponse>>;
  /**
   * Long running delete request, service returns a 500, then a  202 to the initial request, with an
   * entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll
   * returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  deleteProvisioning202Accepted200Succeeded(
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<LRORetrysDeleteProvisioning202Accepted200SucceededResponse>
  >;
  /**
   * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return
   * this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  delete202Retry200(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LRORetrysDelete202Retry200Response>>;
  /**
   * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the
   * endpoint indicated in the Azure-AsyncOperation header for operation status
   * @param options The options parameters.
   */
  deleteAsyncRelativeRetrySucceeded(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LRORetrysDeleteAsyncRelativeRetrySucceededResponse>>;
  /**
   * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location'
   * and 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  post202Retry200(
    options?: LRORetrysPost202Retry200OptionalParams
  ): Promise<LROPoller<LRORetrysPost202Retry200Response>>;
  /**
   * Long running post request, service returns a 500, then a 202 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  postAsyncRelativeRetrySucceeded(
    options?: LRORetrysPostAsyncRelativeRetrySucceededOptionalParams
  ): Promise<LROPoller<LRORetrysPostAsyncRelativeRetrySucceededResponse>>;
}
