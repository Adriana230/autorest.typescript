/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { MediaTypesClientContext } from "./mediaTypesClientContext";

class MediaTypesClient extends MediaTypesClientContext {
  /**
   * Initializes a new instance of the MediaTypesClient class.
   * @param options The parameter options
   */
  constructor(options?: Models.MediaTypesClientOptionalParams) {
    super(options);
  }

  /**
   * Analyze body, that could be different media types.
   * @param options The options parameters.
   */
  analyzeBody(
    options?: Models.MediaTypesClientAnalyzeBodyOptionalParams
  ): Promise<Models.MediaTypesClientAnalyzeBodyResponse> {
    return this.sendOperationRequest(
      { options },
      analyzeBodyOperationSpec
    ) as Promise<Models.MediaTypesClientAnalyzeBodyResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const analyzeBodyOperationSpec: coreHttp.OperationSpec = {
  path: "/mediatypes/analyze",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" }, serializedName: "String" }
    }
  },
  requestBody: Parameters.input,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};

// Operation Specifications

export {
  MediaTypesClient,
  MediaTypesClientContext,
  Models as MediaTypesModels,
  Mappers as MediaTypesMappers
};
