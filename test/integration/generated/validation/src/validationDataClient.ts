/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { ValidationDataClientContext } from "./validationDataClientContext";
import {
  ValidationDataClientOptionalParams,
  ValidationDataClientValidationOfMethodParametersResponse,
  ValidationDataClientValidationOfBodyOptionalParams,
  ValidationDataClientValidationOfBodyResponse,
  ValidationDataClientPostWithConstantInBodyOptionalParams,
  ValidationDataClientPostWithConstantInBodyResponse
} from "./models";

export class ValidationDataClient extends ValidationDataClientContext {
  /**
   * Initializes a new instance of the ValidationDataClient class.
   * @param subscriptionId Subscription ID.
   * @param options The parameter options
   */
  constructor(
    subscriptionId: string,
    options?: ValidationDataClientOptionalParams
  ) {
    super(subscriptionId, options);
  }

  /**
   * Validates input parameters on the method. See swagger for details.
   * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
   * @param id Required int multiple of 10 from 100 to 1000.
   * @param options The options parameters.
   */
  validationOfMethodParameters(
    resourceGroupName: string,
    id: number,
    options?: coreHttp.OperationOptions
  ): Promise<ValidationDataClientValidationOfMethodParametersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { resourceGroupName, id, options: operationOptions },
      validationOfMethodParametersOperationSpec
    ) as Promise<ValidationDataClientValidationOfMethodParametersResponse>;
  }

  /**
   * Validates body parameters on the method. See swagger for details.
   * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
   * @param id Required int multiple of 10 from 100 to 1000.
   * @param options The options parameters.
   */
  validationOfBody(
    resourceGroupName: string,
    id: number,
    options?: ValidationDataClientValidationOfBodyOptionalParams
  ): Promise<ValidationDataClientValidationOfBodyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { resourceGroupName, id, options: operationOptions },
      validationOfBodyOperationSpec
    ) as Promise<ValidationDataClientValidationOfBodyResponse>;
  }

  /**
   * @param options The options parameters.
   */
  getWithConstantInPath(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getWithConstantInPathOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * @param options The options parameters.
   */
  postWithConstantInBody(
    options?: ValidationDataClientPostWithConstantInBodyOptionalParams
  ): Promise<ValidationDataClientPostWithConstantInBodyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      postWithConstantInBodyOperationSpec
    ) as Promise<ValidationDataClientPostWithConstantInBodyResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const validationOfMethodParametersOperationSpec: coreHttp.OperationSpec = {
  path: "/fakepath/{subscriptionId}/{resourceGroupName}/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validationOfBodyOperationSpec: coreHttp.OperationSpec = {
  path: "/fakepath/{subscriptionId}/{resourceGroupName}/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.id
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const getWithConstantInPathOperationSpec: coreHttp.OperationSpec = {
  path: "/validation/constantsInPath/{constantParam}/value",
  httpMethod: "GET",
  responses: { 200: {} },
  urlParameters: [Parameters.$host, Parameters.constantParam],
  serializer
};
const postWithConstantInBodyOperationSpec: coreHttp.OperationSpec = {
  path: "/validation/constantsInPath/{constantParam}/value",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.constantParam],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
