/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
 *
 * @summary Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
 */
import {
  ImmutabilityPolicy,
  StorageManagementClient
} from "@msinternal/storage-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: StorageManagementClient;
//blobContainers.createOrUpdateImmutabilityPolicy
async function createOrUpdateImmutabilityPolicy() {
  const resourceGroupName = "res1782";
  const accountName = "sto7069";
  const containerName = "container6397";
  const parameters: ImmutabilityPolicy = {
    allowProtectedAppendWrites: true,
    immutabilityPeriodSinceCreationInDays: 3
  };
  const options = { parameters: parameters };
  await client.blobContainers
    .createOrUpdateImmutabilityPolicy(
      resourceGroupName,
      accountName,
      containerName,
      options
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "{subscription-id}";
  client = new StorageManagementClient(credential, subscriptionId);
  await createOrUpdateImmutabilityPolicy();
}
main();
