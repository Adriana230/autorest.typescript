/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Sets the managementpolicy to the specified storage account.
 *
 * @summary Sets the managementpolicy to the specified storage account.
 */
import {
  ManagementPolicy,
  StorageManagementClient
} from "@msinternal/storage-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: StorageManagementClient;
//managementPolicies.createOrUpdate
async function storageAccountSetManagementPolicyLastAccessTimeBasedBlobActions() {
  const resourceGroupName = "res7687";
  const accountName = "sto9699";
  const managementPolicyName = "default";
  const properties: ManagementPolicy = {
    policy: {
      rules: [
        {
          name: "olcmtest",
          type: "Lifecycle",
          definition: {
            actions: {
              baseBlob: {
                delete: { daysAfterLastAccessTimeGreaterThan: 1000 },
                enableAutoTierToHotFromCool: true,
                tierToArchive: { daysAfterLastAccessTimeGreaterThan: 90 },
                tierToCool: { daysAfterLastAccessTimeGreaterThan: 30 }
              },
              snapshot: { delete: { daysAfterCreationGreaterThan: 30 } }
            },
            filters: {
              blobTypes: ["blockBlob"],
              prefixMatch: ["olcmtestcontainer"]
            }
          },
          enabled: true
        }
      ]
    }
  };
  await client.managementPolicies
    .createOrUpdate(
      resourceGroupName,
      accountName,
      managementPolicyName,
      properties
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "{subscription-id}";
  client = new StorageManagementClient(credential, subscriptionId);
  await storageAccountSetManagementPolicyLastAccessTimeBasedBlobActions();
}
main();
