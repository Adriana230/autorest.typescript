/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
 *
 * @summary Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
 */
import {
  ImmutabilityPolicy,
  StorageManagementClient
} from "@msinternal/storage-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: StorageManagementClient;
//blobContainers.extendImmutabilityPolicy
async function extendImmutabilityPolicy() {
  const resourceGroupName = "res6238";
  const accountName = "sto232";
  const containerName = "container5023";
  const ifMatch = '"8d59f830d0c3bf9"';
  const parameters: ImmutabilityPolicy = {
    immutabilityPeriodSinceCreationInDays: 100
  };
  const options = { parameters: parameters };
  await client.blobContainers
    .extendImmutabilityPolicy(
      resourceGroupName,
      accountName,
      containerName,
      ifMatch,
      options
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "{subscription-id}";
  client = new StorageManagementClient(credential, subscriptionId);
  await extendImmutabilityPolicy();
}
main();
