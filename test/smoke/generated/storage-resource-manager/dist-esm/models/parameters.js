/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { StorageAccountCheckNameAvailabilityParameters as StorageAccountCheckNameAvailabilityParametersMapper, StorageAccountCreateParameters as StorageAccountCreateParametersMapper, StorageAccountUpdateParameters as StorageAccountUpdateParametersMapper, StorageAccountRegenerateKeyParameters as StorageAccountRegenerateKeyParametersMapper, AccountSasParameters as AccountSasParametersMapper, ServiceSasParameters as ServiceSasParametersMapper, BlobRestoreParameters as BlobRestoreParametersMapper, ManagementPolicy as ManagementPolicyMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, ObjectReplicationPolicy as ObjectReplicationPolicyMapper, EncryptionScope as EncryptionScopeMapper, BlobServiceProperties as BlobServicePropertiesMapper, BlobContainer as BlobContainerMapper, LegalHold as LegalHoldMapper, ImmutabilityPolicy as ImmutabilityPolicyMapper, LeaseContainerRequest as LeaseContainerRequestMapper, FileServiceProperties as FileServicePropertiesMapper, FileShare as FileShareMapper, DeletedShare as DeletedShareMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const accountName = {
    parameterPath: "accountName",
    mapper: StorageAccountCheckNameAvailabilityParametersMapper
};
export const parameters = {
    parameterPath: "parameters",
    mapper: StorageAccountCreateParametersMapper
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accountName1 = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "Enum",
            allowedValues: ["geoReplicationStats", "blobRestoreStatus"]
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: StorageAccountUpdateParametersMapper
};
export const expand1 = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: "kerb",
        isConstant: true,
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const regenerateKey = {
    parameterPath: "regenerateKey",
    mapper: StorageAccountRegenerateKeyParametersMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: AccountSasParametersMapper
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: ServiceSasParametersMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: BlobRestoreParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const managementPolicyName = {
    parameterPath: "managementPolicyName",
    mapper: {
        serializedName: "managementPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: ManagementPolicyMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties1 = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const objectReplicationPolicyId = {
    parameterPath: "objectReplicationPolicyId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "objectReplicationPolicyId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties2 = {
    parameterPath: "properties",
    mapper: ObjectReplicationPolicyMapper
};
export const encryptionScope = {
    parameterPath: "encryptionScope",
    mapper: EncryptionScopeMapper
};
export const encryptionScopeName = {
    parameterPath: "encryptionScopeName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "encryptionScopeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: BlobServicePropertiesMapper
};
export const blobServicesName = {
    parameterPath: "blobServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "BlobServicesName",
        type: {
            name: "String"
        }
    }
};
export const maxpagesize = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const blobContainer = {
    parameterPath: "blobContainer",
    mapper: BlobContainerMapper
};
export const containerName = {
    parameterPath: "containerName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "containerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const legalHold = {
    parameterPath: "legalHold",
    mapper: LegalHoldMapper
};
export const parameters6 = {
    parameterPath: ["options", "parameters"],
    mapper: ImmutabilityPolicyMapper
};
export const immutabilityPolicyName = {
    parameterPath: "immutabilityPolicyName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "immutabilityPolicyName",
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: ["options", "parameters"],
    mapper: LeaseContainerRequestMapper
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: FileServicePropertiesMapper
};
export const fileServicesName = {
    parameterPath: "fileServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "FileServicesName",
        type: {
            name: "String"
        }
    }
};
export const expand2 = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: "deleted",
        isConstant: true,
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const fileShare = {
    parameterPath: "fileShare",
    mapper: FileShareMapper
};
export const shareName = {
    parameterPath: "shareName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "shareName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand3 = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: "stats",
        isConstant: true,
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const deletedShare = {
    parameterPath: "deletedShare",
    mapper: DeletedShareMapper
};
//# sourceMappingURL=parameters.js.map