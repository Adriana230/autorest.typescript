/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import "@azure/core-paging";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class representing a ResourceLinks. */
export class ResourceLinksImpl {
    /**
     * Initialize a new instance of the class ResourceLinks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the linked resources for the subscription.
     * @param options The options parameters.
     */
    listAtSubscription(options) {
        const iter = this.listAtSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAtSubscriptionPagingPage(options);
            }
        };
    }
    listAtSubscriptionPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listAtSubscriptionPagingPage_1() {
            let result = yield __await(this._listAtSubscription(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAtSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAtSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAtSubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listAtSubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of resource links at and below the specified source scope.
     * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
     *              list resource links at and under a resource group, set the scope to
     *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
     * @param options The options parameters.
     */
    listAtSourceScope(scope, options) {
        const iter = this.listAtSourceScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAtSourceScopePagingPage(scope, options);
            }
        };
    }
    listAtSourceScopePagingPage(scope, options) {
        return __asyncGenerator(this, arguments, function* listAtSourceScopePagingPage_1() {
            let result = yield __await(this._listAtSourceScope(scope, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAtSourceScopeNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAtSourceScopePagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listAtSourceScopePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listAtSourceScopePagingPage(scope, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Deletes a resource link with the specified ID.
     * @param linkId The fully qualified ID of the resource link. Use the format,
     *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
     *               For example,
     *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
     * @param options The options parameters.
     */
    delete(linkId, options) {
        return this.client.sendOperationRequest({ linkId, options }, deleteOperationSpec);
    }
    /**
     * Creates or updates a resource link between the specified resources.
     * @param linkId The fully qualified ID of the resource link. Use the format,
     *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
     *               For example,
     *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
     * @param parameters Parameters for creating or updating a resource link.
     * @param options The options parameters.
     */
    createOrUpdate(linkId, parameters, options) {
        return this.client.sendOperationRequest({ linkId, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Gets a resource link with the specified ID.
     * @param linkId The fully qualified Id of the resource link. For example,
     *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
     * @param options The options parameters.
     */
    get(linkId, options) {
        return this.client.sendOperationRequest({ linkId, options }, getOperationSpec);
    }
    /**
     * Gets all the linked resources for the subscription.
     * @param options The options parameters.
     */
    _listAtSubscription(options) {
        return this.client.sendOperationRequest({ options }, listAtSubscriptionOperationSpec);
    }
    /**
     * Gets a list of resource links at and below the specified source scope.
     * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
     *              list resource links at and under a resource group, set the scope to
     *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
     * @param options The options parameters.
     */
    _listAtSourceScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listAtSourceScopeOperationSpec);
    }
    /**
     * ListAtSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListAtSubscription method.
     * @param options The options parameters.
     */
    _listAtSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAtSubscriptionNextOperationSpec);
    }
    /**
     * ListAtSourceScopeNext
     * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
     *              list resource links at and under a resource group, set the scope to
     *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
     * @param nextLink The nextLink from the previous successful call to the ListAtSourceScope method.
     * @param options The options parameters.
     */
    _listAtSourceScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listAtSourceScopeNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec = {
    path: "/{linkId}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.linkId],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/{linkId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLink
        },
        201: {
            bodyMapper: Mappers.ResourceLink
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.linkId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/{linkId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLink
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.linkId],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/links",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLinkResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSourceScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Resources/links",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLinkResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter1],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLinkResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSourceScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceLinkResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter1],
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=resourceLinks.js.map