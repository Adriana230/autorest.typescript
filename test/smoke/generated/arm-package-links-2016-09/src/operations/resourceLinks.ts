/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ResourceLinks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementLinkClient } from "../managementLinkClient";
import {
  ResourceLink,
  ResourceLinksListAtSubscriptionNextOptionalParams,
  ResourceLinksListAtSubscriptionOptionalParams,
  ResourceLinksListAtSourceScopeNextOptionalParams,
  ResourceLinksListAtSourceScopeOptionalParams,
  ResourceLinksListAtSubscriptionNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextNextOptionalParams,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextNextOptionalParams,
  ResourceLinksDeleteOptionalParams,
  ResourceLinksCreateOrUpdateOptionalParams,
  ResourceLinksCreateOrUpdateResponse,
  ResourceLinksGetOptionalParams,
  ResourceLinksGetResponse,
  ResourceLinksListAtSubscriptionResponse,
  ResourceLinksListAtSourceScopeResponse,
  ResourceLinksListAtSubscriptionNextResponse,
  ResourceLinksListAtSourceScopeNextResponse,
  ResourceLinksListAtSubscriptionNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextResponse,
  ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextNextResponse,
  ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceLinks operations. */
export class ResourceLinksImpl implements ResourceLinks {
  private readonly client: ManagementLinkClient;

  /**
   * Initialize a new instance of the class ResourceLinks class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementLinkClient) {
    this.client = client;
  }

  /**
   * Gets all the linked resources for the subscription.
   * @param options The options parameters.
   */
  public listAtSubscription(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionPagingPage(options);
      }
    };
  }

  private async *listAtSubscriptionPagingPage(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionPagingAll(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of resource links at and below the specified source scope.
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param options The options parameters.
   */
  public listAtSourceScope(
    scope: string,
    options?: ResourceLinksListAtSourceScopeOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopePagingPage(scope, options);
      }
    };
  }

  private async *listAtSourceScopePagingPage(
    scope: string,
    options?: ResourceLinksListAtSourceScopeOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScope(scope, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopePagingAll(
    scope: string,
    options?: ResourceLinksListAtSourceScopeOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscription method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtSubscriptionNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScope method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextPagingAll(scope, nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextPagingPage(scope, nextLink, options);
      }
    };
  }

  private async *listAtSourceScopeNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNext(scope, nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtSubscriptionNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNext method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtSubscriptionNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSubscriptionNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSubscriptionNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSubscriptionNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSourceScopeNextNextNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSourceScopeNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceLink> {
    const iter = this.listAtSourceScopeNextNextNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSourceScopeNextNextNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSourceScopeNextNextNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink[]> {
    let result = await this._listAtSourceScopeNextNextNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSourceScopeNextNextNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSourceScopeNextNextNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceLink> {
    for await (const page of this.listAtSourceScopeNextNextNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Deletes a resource link with the specified ID.
   * @param linkId The fully qualified ID of the resource link. Use the format,
   *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
   *               For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param options The options parameters.
   */
  delete(
    linkId: string,
    options?: ResourceLinksDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { linkId, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates or updates a resource link between the specified resources.
   * @param linkId The fully qualified ID of the resource link. Use the format,
   *               /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
   *               For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param parameters Parameters for creating or updating a resource link.
   * @param options The options parameters.
   */
  createOrUpdate(
    linkId: string,
    parameters: ResourceLink,
    options?: ResourceLinksCreateOrUpdateOptionalParams
  ): Promise<ResourceLinksCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { linkId, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Gets a resource link with the specified ID.
   * @param linkId The fully qualified Id of the resource link. For example,
   *               /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
   * @param options The options parameters.
   */
  get(
    linkId: string,
    options?: ResourceLinksGetOptionalParams
  ): Promise<ResourceLinksGetResponse> {
    return this.client.sendOperationRequest(
      { linkId, options },
      getOperationSpec
    );
  }

  /**
   * Gets all the linked resources for the subscription.
   * @param options The options parameters.
   */
  private _listAtSubscription(
    options?: ResourceLinksListAtSubscriptionOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAtSubscriptionOperationSpec
    );
  }

  /**
   * Gets a list of resource links at and below the specified source scope.
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param options The options parameters.
   */
  private _listAtSourceScope(
    scope: string,
    options?: ResourceLinksListAtSourceScopeOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listAtSourceScopeOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscription method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScope method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNext method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the ListAtSourceScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSubscriptionNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextOptionalParams
  ): Promise<ResourceLinksListAtSourceScopeNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ResourceLinksListAtSubscriptionNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSourceScopeNextNextNextNextNextNextNextNext
   * @param scope The fully qualified ID of the scope for getting the resource links. For example, to
   *              list resource links at and under a resource group, set the scope to
   *              /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSourceScopeNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSourceScopeNextNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ResourceLinksListAtSourceScopeNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtSourceScopeNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLink
    },
    201: {
      bodyMapper: Mappers.ResourceLink
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{linkId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLink
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.linkId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/links",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/links",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSourceScopeNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceLinkResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
