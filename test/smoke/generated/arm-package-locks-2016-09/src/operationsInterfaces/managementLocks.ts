/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  ManagementLockObject,
  ManagementLocksListAtResourceGroupLevelNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelOptionalParams,
  ManagementLocksListAtResourceLevelNextOptionalParams,
  ManagementLocksListAtResourceLevelOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelOptionalParams,
  ManagementLocksListByScopeNextOptionalParams,
  ManagementLocksListByScopeOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextOptionalParams,
  ManagementLocksListByScopeNextNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextNextOptionalParams,
  ManagementLocksListByScopeNextNextNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextNextNextOptionalParams,
  ManagementLocksListByScopeNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextNextNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextNextNextNextOptionalParams,
  ManagementLocksListByScopeNextNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextNextNextNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextNextNextNextNextOptionalParams,
  ManagementLocksListByScopeNextNextNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceGroupLevelNextNextNextNextNextNextNextOptionalParams,
  ManagementLocksListAtResourceLevelNextNextNextNextNextNextNextOptionalParams,
  ManagementLocksListAtSubscriptionLevelNextNextNextNextNextNextNextOptionalParams,
  ManagementLocksListByScopeNextNextNextNextNextNextNextOptionalParams,
  ManagementLocksCreateOrUpdateAtResourceGroupLevelOptionalParams,
  ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse,
  ManagementLocksDeleteAtResourceGroupLevelOptionalParams,
  ManagementLocksGetAtResourceGroupLevelOptionalParams,
  ManagementLocksGetAtResourceGroupLevelResponse,
  ManagementLocksCreateOrUpdateByScopeOptionalParams,
  ManagementLocksCreateOrUpdateByScopeResponse,
  ManagementLocksDeleteByScopeOptionalParams,
  ManagementLocksGetByScopeOptionalParams,
  ManagementLocksGetByScopeResponse,
  ManagementLocksCreateOrUpdateAtResourceLevelOptionalParams,
  ManagementLocksCreateOrUpdateAtResourceLevelResponse,
  ManagementLocksDeleteAtResourceLevelOptionalParams,
  ManagementLocksGetAtResourceLevelOptionalParams,
  ManagementLocksGetAtResourceLevelResponse,
  ManagementLocksCreateOrUpdateAtSubscriptionLevelOptionalParams,
  ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse,
  ManagementLocksDeleteAtSubscriptionLevelOptionalParams,
  ManagementLocksGetAtSubscriptionLevelOptionalParams,
  ManagementLocksGetAtSubscriptionLevelResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagementLocks. */
export interface ManagementLocks {
  /**
   * Gets all the management locks for a resource group.
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param options The options parameters.
   */
  listAtResourceGroupLevel(
    resourceGroupName: string,
    options?: ManagementLocksListAtResourceGroupLevelOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a resource or any level below resource.
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param options The options parameters.
   */
  listAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: ManagementLocksListAtResourceLevelOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a subscription.
   * @param options The options parameters.
   */
  listAtSubscriptionLevel(
    options?: ManagementLocksListAtSubscriptionLevelOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * Gets all the management locks for a scope.
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param options The options parameters.
   */
  listByScope(
    scope: string,
    options?: ManagementLocksListByScopeOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceGroupLevel
   *                 method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceLevel method.
   * @param options The options parameters.
   */
  listAtResourceLevelNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionLevel
   *                 method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScope method.
   * @param options The options parameters.
   */
  listByScopeNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceGroupLevelNext
   *                 method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceLevelNext
   *                 method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionLevelNext
   *                 method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScopeNext method.
   * @param options The options parameters.
   */
  listByScopeNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceGroupLevelNextNext method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceLevelNextNext
   *                 method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionLevelNextNext method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScopeNextNext method.
   * @param options The options parameters.
   */
  listByScopeNextNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceGroupLevelNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceLevelNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionLevelNextNextNext method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNextNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNextNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listByScopeNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceGroupLevelNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceLevelNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionLevelNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNextNextNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNextNextNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the ListByScopeNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listByScopeNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceGroupLevelNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceLevelNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionLevelNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNextNextNextNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNextNextNextNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listByScopeNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceGroupLevelNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locks to get.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceGroupLevelNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceGroupLevelNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceGroupLevelNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtResourceLevelNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the locked resource. The name is
   *                          case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the locked resource.
   * @param resourceName The name of the locked resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtResourceLevelNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtResourceLevelNextNextNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: ManagementLocksListAtResourceLevelNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListAtSubscriptionLevelNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionLevelNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAtSubscriptionLevelNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ManagementLocksListAtSubscriptionLevelNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * ListByScopeNextNextNextNextNextNextNext
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listByScopeNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: ManagementLocksListByScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ManagementLockObject>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group to lock.
   * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain
   *                 <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters The management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: ManagementLocksCreateOrUpdateAtResourceGroupLevelOptionalParams
  ): Promise<ManagementLocksCreateOrUpdateAtResourceGroupLevelResponse>;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the lock.
   * @param lockName The name of lock to delete.
   * @param options The options parameters.
   */
  deleteAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    options?: ManagementLocksDeleteAtResourceGroupLevelOptionalParams
  ): Promise<void>;
  /**
   * Gets a management lock at the resource group level.
   * @param resourceGroupName The name of the locked resource group.
   * @param lockName The name of the lock to get.
   * @param options The options parameters.
   */
  getAtResourceGroupLevel(
    resourceGroupName: string,
    lockName: string,
    options?: ManagementLocksGetAtResourceGroupLevelOptionalParams
  ): Promise<ManagementLocksGetAtResourceGroupLevelResponse>;
  /**
   * Create or update a management lock by scope.
   * @param scope The scope for the lock. When providing a scope for the assignment, use
   *              '/subscriptions/{subscriptionId}' for subscriptions,
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
   *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
   *              for resources.
   * @param lockName The name of lock.
   * @param parameters Create or update management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateByScope(
    scope: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: ManagementLocksCreateOrUpdateByScopeOptionalParams
  ): Promise<ManagementLocksCreateOrUpdateByScopeResponse>;
  /**
   * Delete a management lock by scope.
   * @param scope The scope for the lock.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  deleteByScope(
    scope: string,
    lockName: string,
    options?: ManagementLocksDeleteByScopeOptionalParams
  ): Promise<void>;
  /**
   * Get a management lock by scope.
   * @param scope The scope for the lock.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  getByScope(
    scope: string,
    lockName: string,
    options?: ManagementLocksGetByScopeOptionalParams
  ): Promise<ManagementLocksGetByScopeResponse>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the resource to lock.
   * @param resourceProviderNamespace The resource provider namespace of the resource to lock.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource to lock.
   * @param resourceName The name of the resource to lock.
   * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
   *                 contain <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters Parameters for creating or updating a  management lock.
   * @param options The options parameters.
   */
  createOrUpdateAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    parameters: ManagementLockObject,
    options?: ManagementLocksCreateOrUpdateAtResourceLevelOptionalParams
  ): Promise<ManagementLocksCreateOrUpdateAtResourceLevelResponse>;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param resourceGroupName The name of the resource group containing the resource with the lock to
   *                          delete.
   * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to
   *                                  delete.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource with the lock to delete.
   * @param resourceName The name of the resource with the lock to delete.
   * @param lockName The name of the lock to delete.
   * @param options The options parameters.
   */
  deleteAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    options?: ManagementLocksDeleteAtResourceLevelOptionalParams
  ): Promise<void>;
  /**
   * Get the management lock of a resource or any level below resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases.
   * @param resourceType The type of the resource.
   * @param resourceName The name of the resource.
   * @param lockName The name of lock.
   * @param options The options parameters.
   */
  getAtResourceLevel(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    lockName: string,
    options?: ManagementLocksGetAtResourceLevelOptionalParams
  ): Promise<ManagementLocksGetAtResourceLevelResponse>;
  /**
   * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
   * management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
   *                 contain <, > %, &, :, \, ?, /, or any control characters.
   * @param parameters The management lock parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtSubscriptionLevel(
    lockName: string,
    parameters: ManagementLockObject,
    options?: ManagementLocksCreateOrUpdateAtSubscriptionLevelOptionalParams
  ): Promise<ManagementLocksCreateOrUpdateAtSubscriptionLevelResponse>;
  /**
   * To delete management locks, you must have access to Microsoft.Authorization/* or
   * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
   * Administrator are granted those actions.
   * @param lockName The name of lock to delete.
   * @param options The options parameters.
   */
  deleteAtSubscriptionLevel(
    lockName: string,
    options?: ManagementLocksDeleteAtSubscriptionLevelOptionalParams
  ): Promise<void>;
  /**
   * Gets a management lock at the subscription level.
   * @param lockName The name of the lock to get.
   * @param options The options parameters.
   */
  getAtSubscriptionLevel(
    lockName: string,
    options?: ManagementLocksGetAtSubscriptionLevelOptionalParams
  ): Promise<ManagementLocksGetAtSubscriptionLevelResponse>;
}
