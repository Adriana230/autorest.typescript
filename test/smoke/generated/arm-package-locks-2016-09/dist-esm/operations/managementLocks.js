/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import "@azure/core-paging";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class representing a ManagementLocks. */
export class ManagementLocksImpl {
    /**
     * Initialize a new instance of the class ManagementLocks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the management locks for a resource group.
     * @param resourceGroupName The name of the resource group containing the locks to get.
     * @param options The options parameters.
     */
    listAtResourceGroupLevel(resourceGroupName, options) {
        const iter = this.listAtResourceGroupLevelPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAtResourceGroupLevelPagingPage(resourceGroupName, options);
            }
        };
    }
    listAtResourceGroupLevelPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listAtResourceGroupLevelPagingPage_1() {
            let result = yield __await(this._listAtResourceGroupLevel(resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAtResourceGroupLevelNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAtResourceGroupLevelPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listAtResourceGroupLevelPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listAtResourceGroupLevelPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the management locks for a resource or any level below resource.
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is
     *                          case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the locked resource.
     * @param resourceName The name of the locked resource.
     * @param options The options parameters.
     */
    listAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        const iter = this.listAtResourceLevelPagingAll(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAtResourceLevelPagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options);
            }
        };
    }
    listAtResourceLevelPagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listAtResourceLevelPagingPage_1() {
            let result = yield __await(this._listAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAtResourceLevelNext(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAtResourceLevelPagingAll(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listAtResourceLevelPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listAtResourceLevelPagingPage(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all the management locks for a subscription.
     * @param options The options parameters.
     */
    listAtSubscriptionLevel(options) {
        const iter = this.listAtSubscriptionLevelPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAtSubscriptionLevelPagingPage(options);
            }
        };
    }
    listAtSubscriptionLevelPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listAtSubscriptionLevelPagingPage_1() {
            let result = yield __await(this._listAtSubscriptionLevel(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAtSubscriptionLevelNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAtSubscriptionLevelPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAtSubscriptionLevelPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listAtSubscriptionLevelPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets all the management locks for a scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use
     *              '/subscriptions/{subscriptionId}' for subscriptions,
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     *              for resources.
     * @param options The options parameters.
     */
    listByScope(scope, options) {
        const iter = this.listByScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByScopePagingPage(scope, options);
            }
        };
    }
    listByScopePagingPage(scope, options) {
        return __asyncGenerator(this, arguments, function* listByScopePagingPage_1() {
            let result = yield __await(this._listByScope(scope, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByScopeNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByScopePagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listByScopePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listByScopePagingPage(scope, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
     * management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group to lock.
     * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain
     *                 <, > %, &, :, \, ?, /, or any control characters.
     * @param parameters The management lock parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceGroupLevel(resourceGroupName, lockName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, lockName, parameters, options }, createOrUpdateAtResourceGroupLevelOperationSpec);
    }
    /**
     * To delete management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the lock.
     * @param lockName The name of lock to delete.
     * @param options The options parameters.
     */
    deleteAtResourceGroupLevel(resourceGroupName, lockName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, lockName, options }, deleteAtResourceGroupLevelOperationSpec);
    }
    /**
     * Gets a management lock at the resource group level.
     * @param resourceGroupName The name of the locked resource group.
     * @param lockName The name of the lock to get.
     * @param options The options parameters.
     */
    getAtResourceGroupLevel(resourceGroupName, lockName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, lockName, options }, getAtResourceGroupLevelOperationSpec);
    }
    /**
     * Create or update a management lock by scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use
     *              '/subscriptions/{subscriptionId}' for subscriptions,
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     *              for resources.
     * @param lockName The name of lock.
     * @param parameters Create or update management lock parameters.
     * @param options The options parameters.
     */
    createOrUpdateByScope(scope, lockName, parameters, options) {
        return this.client.sendOperationRequest({ scope, lockName, parameters, options }, createOrUpdateByScopeOperationSpec);
    }
    /**
     * Delete a management lock by scope.
     * @param scope The scope for the lock.
     * @param lockName The name of lock.
     * @param options The options parameters.
     */
    deleteByScope(scope, lockName, options) {
        return this.client.sendOperationRequest({ scope, lockName, options }, deleteByScopeOperationSpec);
    }
    /**
     * Get a management lock by scope.
     * @param scope The scope for the lock.
     * @param lockName The name of lock.
     * @param options The options parameters.
     */
    getByScope(scope, lockName, options) {
        return this.client.sendOperationRequest({ scope, lockName, options }, getByScopeOperationSpec);
    }
    /**
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
     * management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource to lock.
     * @param resourceProviderNamespace The resource provider namespace of the resource to lock.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource to lock.
     * @param resourceName The name of the resource to lock.
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
     *                 contain <, > %, &, :, \, ?, /, or any control characters.
     * @param parameters Parameters for creating or updating a  management lock.
     * @param options The options parameters.
     */
    createOrUpdateAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            lockName,
            parameters,
            options
        }, createOrUpdateAtResourceLevelOperationSpec);
    }
    /**
     * To delete management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource with the lock to
     *                          delete.
     * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to
     *                                  delete.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource with the lock to delete.
     * @param resourceName The name of the resource with the lock to delete.
     * @param lockName The name of the lock to delete.
     * @param options The options parameters.
     */
    deleteAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            lockName,
            options
        }, deleteAtResourceLevelOperationSpec);
    }
    /**
     * Get the management lock of a resource or any level below resource.
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases.
     * @param resourceType The type of the resource.
     * @param resourceName The name of the resource.
     * @param lockName The name of lock.
     * @param options The options parameters.
     */
    getAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            lockName,
            options
        }, getAtResourceLevelOperationSpec);
    }
    /**
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create
     * management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot
     *                 contain <, > %, &, :, \, ?, /, or any control characters.
     * @param parameters The management lock parameters.
     * @param options The options parameters.
     */
    createOrUpdateAtSubscriptionLevel(lockName, parameters, options) {
        return this.client.sendOperationRequest({ lockName, parameters, options }, createOrUpdateAtSubscriptionLevelOperationSpec);
    }
    /**
     * To delete management locks, you must have access to Microsoft.Authorization/* or
     * Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access
     * Administrator are granted those actions.
     * @param lockName The name of lock to delete.
     * @param options The options parameters.
     */
    deleteAtSubscriptionLevel(lockName, options) {
        return this.client.sendOperationRequest({ lockName, options }, deleteAtSubscriptionLevelOperationSpec);
    }
    /**
     * Gets a management lock at the subscription level.
     * @param lockName The name of the lock to get.
     * @param options The options parameters.
     */
    getAtSubscriptionLevel(lockName, options) {
        return this.client.sendOperationRequest({ lockName, options }, getAtSubscriptionLevelOperationSpec);
    }
    /**
     * Gets all the management locks for a resource group.
     * @param resourceGroupName The name of the resource group containing the locks to get.
     * @param options The options parameters.
     */
    _listAtResourceGroupLevel(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listAtResourceGroupLevelOperationSpec);
    }
    /**
     * Gets all the management locks for a resource or any level below resource.
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is
     *                          case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the locked resource.
     * @param resourceName The name of the locked resource.
     * @param options The options parameters.
     */
    _listAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            options
        }, listAtResourceLevelOperationSpec);
    }
    /**
     * Gets all the management locks for a subscription.
     * @param options The options parameters.
     */
    _listAtSubscriptionLevel(options) {
        return this.client.sendOperationRequest({ options }, listAtSubscriptionLevelOperationSpec);
    }
    /**
     * Gets all the management locks for a scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use
     *              '/subscriptions/{subscriptionId}' for subscriptions,
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     *              for resources.
     * @param options The options parameters.
     */
    _listByScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listByScopeOperationSpec);
    }
    /**
     * ListAtResourceGroupLevelNext
     * @param resourceGroupName The name of the resource group containing the locks to get.
     * @param nextLink The nextLink from the previous successful call to the ListAtResourceGroupLevel
     *                 method.
     * @param options The options parameters.
     */
    _listAtResourceGroupLevelNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listAtResourceGroupLevelNextOperationSpec);
    }
    /**
     * ListAtResourceLevelNext
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is
     *                          case insensitive.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the locked resource.
     * @param resourceName The name of the locked resource.
     * @param nextLink The nextLink from the previous successful call to the ListAtResourceLevel method.
     * @param options The options parameters.
     */
    _listAtResourceLevelNext(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            nextLink,
            options
        }, listAtResourceLevelNextOperationSpec);
    }
    /**
     * ListAtSubscriptionLevelNext
     * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionLevel
     *                 method.
     * @param options The options parameters.
     */
    _listAtSubscriptionLevelNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAtSubscriptionLevelNextOperationSpec);
    }
    /**
     * ListByScopeNext
     * @param scope The scope for the lock. When providing a scope for the assignment, use
     *              '/subscriptions/{subscriptionId}' for subscriptions,
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and
     *              '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
     *              for resources.
     * @param nextLink The nextLink from the previous successful call to the ListByScope method.
     * @param options The options parameters.
     */
    _listByScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listByScopeNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateAtResourceGroupLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        },
        201: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAtResourceGroupLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    serializer
};
const getAtResourceGroupLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        },
        201: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
    serializer
};
const getByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.lockName, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtResourceLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        },
        201: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAtResourceLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    serializer
};
const getAtResourceLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.lockName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtSubscriptionLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        },
        201: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAtSubscriptionLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    serializer
};
const getAtSubscriptionLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockObject
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.lockName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtResourceGroupLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtResourceLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSubscriptionLevelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Authorization/locks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtResourceGroupLevelNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtResourceLevelNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.parentResourcePath,
        Parameters.resourceType,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAtSubscriptionLevelNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementLockListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=managementLocks.js.map