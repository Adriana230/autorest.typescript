/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import "@azure/core-paging";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class representing a PolicySetDefinitions. */
export class PolicySetDefinitionsImpl {
    /**
     * Initialize a new instance of the class PolicySetDefinitions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param options The options parameters.
     */
    listBuiltIn(options) {
        const iter = this.listBuiltInPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuiltInPagingPage(options);
            }
        };
    }
    listBuiltInPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listBuiltInPagingPage_1() {
            let result = yield __await(this._listBuiltIn(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listBuiltInNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listBuiltInPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBuiltInPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listBuiltInPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    listByManagementGroup(managementGroupId, options) {
        const iter = this.listByManagementGroupPagingAll(managementGroupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByManagementGroupPagingPage(managementGroupId, options);
            }
        };
    }
    listByManagementGroupPagingPage(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listByManagementGroupPagingPage_1() {
            let result = yield __await(this._listByManagementGroup(managementGroupId, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByManagementGroupNext(managementGroupId, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByManagementGroupPagingAll(managementGroupId, options) {
        return __asyncGenerator(this, arguments, function* listByManagementGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listByManagementGroupPagingPage(managementGroupId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * This operation creates or updates a policy set definition in the given subscription with the given
     * name.
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @param options The options parameters.
     */
    createOrUpdate(policySetDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param options The options parameters.
     */
    delete(policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, options }, deleteOperationSpec);
    }
    /**
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param options The options parameters.
     */
    get(policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, options }, getOperationSpec);
    }
    /**
     * This operation retrieves the built-in policy set definition with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param options The options parameters.
     */
    getBuiltIn(policySetDefinitionName, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, options }, getBuiltInOperationSpec);
    }
    /**
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param options The options parameters.
     */
    _listBuiltIn(options) {
        return this.client.sendOperationRequest({ options }, listBuiltInOperationSpec);
    }
    /**
     * This operation creates or updates a policy set definition in the given management group with the
     * given name.
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @param options The options parameters.
     */
    createOrUpdateAtManagementGroup(policySetDefinitionName, managementGroupId, parameters, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, managementGroupId, parameters, options }, createOrUpdateAtManagementGroupOperationSpec);
    }
    /**
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    deleteAtManagementGroup(policySetDefinitionName, managementGroupId, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, managementGroupId, options }, deleteAtManagementGroupOperationSpec);
    }
    /**
     * This operation retrieves the policy set definition in the given management group with the given
     * name.
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    getAtManagementGroup(policySetDefinitionName, managementGroupId, options) {
        return this.client.sendOperationRequest({ policySetDefinitionName, managementGroupId, options }, getAtManagementGroupOperationSpec);
    }
    /**
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param managementGroupId The ID of the management group.
     * @param options The options parameters.
     */
    _listByManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, listByManagementGroupOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListBuiltInNext
     * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
     * @param options The options parameters.
     */
    _listBuiltInNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBuiltInNextOperationSpec);
    }
    /**
     * ListByManagementGroupNext
     * @param managementGroupId The ID of the management group.
     * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
     * @param options The options parameters.
     */
    _listByManagementGroupNext(managementGroupId, nextLink, options) {
        return this.client.sendOperationRequest({ managementGroupId, nextLink, options }, listByManagementGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        201: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuiltInOperationSpec = {
    path: "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.policySetDefinitionName],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuiltInOperationSpec = {
    path: "/providers/Microsoft.Authorization/policySetDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        201: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getAtManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.policySetDefinitionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.managementGroupId],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuiltInNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const listByManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicySetDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.managementGroupId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=policySetDefinitions.js.map