/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicyDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicyDefinition,
  PolicyDefinitionsListNextOptionalParams,
  PolicyDefinitionsListOptionalParams,
  PolicyDefinitionsListBuiltInNextOptionalParams,
  PolicyDefinitionsListBuiltInOptionalParams,
  PolicyDefinitionsListByManagementGroupNextOptionalParams,
  PolicyDefinitionsListByManagementGroupOptionalParams,
  PolicyDefinitionsListNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListNextNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextOptionalParams,
  PolicyDefinitionsCreateOrUpdateOptionalParams,
  PolicyDefinitionsCreateOrUpdateResponse,
  PolicyDefinitionsDeleteOptionalParams,
  PolicyDefinitionsGetOptionalParams,
  PolicyDefinitionsGetResponse,
  PolicyDefinitionsGetBuiltInOptionalParams,
  PolicyDefinitionsGetBuiltInResponse,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse,
  PolicyDefinitionsDeleteAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupResponse,
  PolicyDefinitionsListResponse,
  PolicyDefinitionsListBuiltInResponse,
  PolicyDefinitionsListByManagementGroupResponse,
  PolicyDefinitionsListNextResponse,
  PolicyDefinitionsListBuiltInNextResponse,
  PolicyDefinitionsListByManagementGroupNextResponse,
  PolicyDefinitionsListNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextResponse,
  PolicyDefinitionsListNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextResponse,
  PolicyDefinitionsListNextNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextNextResponse,
  PolicyDefinitionsListNextNextNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextResponse,
  PolicyDefinitionsListNextNextNextNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextResponse,
  PolicyDefinitionsListNextNextNextNextNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextResponse,
  PolicyDefinitionsListNextNextNextNextNextNextNextNextResponse,
  PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextNextResponse,
  PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyDefinitions operations. */
export class PolicyDefinitionsImpl implements PolicyDefinitions {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicyDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation retrieves a list of all the policy definitions in a given subscription.
   * @param options The options parameters.
   */
  public list(
    options?: PolicyDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: PolicyDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: PolicyDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the built-in policy definitions.
   * @param options The options parameters.
   */
  public listBuiltIn(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInPagingPage(options);
      }
    };
  }

  private async *listBuiltInPagingPage(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltIn(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInPagingAll(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the policy definitions in a given management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  public listByManagementGroup(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupPagingAll(
      managementGroupId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupPagingPage(managementGroupId, options);
      }
    };
  }

  private async *listByManagementGroupPagingPage(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroup(managementGroupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupPagingAll(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupPagingPage(
      managementGroupId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  public listNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
   * @param options The options parameters.
   */
  public listBuiltInNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
   * @param options The options parameters.
   */
  public listByManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  public listNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNext
   *                 method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This operation creates or updates a policy definition in the given subscription with the given name.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policyDefinitionName: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * This operation deletes the policy definition in the given subscription with the given name.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param options The options parameters.
   */
  delete(
    policyDefinitionName: string,
    options?: PolicyDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      deleteOperationSpec
    );
  }

  /**
   * This operation retrieves the policy definition in the given subscription with the given name.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param options The options parameters.
   */
  get(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetOptionalParams
  ): Promise<PolicyDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * This operation retrieves the built-in policy definition with the given name.
   * @param policyDefinitionName The name of the built-in policy definition to get.
   * @param options The options parameters.
   */
  getBuiltIn(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetBuiltInOptionalParams
  ): Promise<PolicyDefinitionsGetBuiltInResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      getBuiltInOperationSpec
    );
  }

  /**
   * This operation creates or updates a policy definition in the given management group with the given
   * name.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param managementGroupId The ID of the management group.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, parameters, options },
      createOrUpdateAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation deletes the policy definition in the given management group with the given name.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsDeleteAtManagementGroupOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, options },
      deleteAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation retrieves the policy definition in the given management group with the given name.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsGetAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, options },
      getAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation retrieves a list of all the policy definitions in a given subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: PolicyDefinitionsListOptionalParams
  ): Promise<PolicyDefinitionsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * This operation retrieves a list of all the built-in policy definitions.
   * @param options The options parameters.
   */
  private _listBuiltIn(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBuiltInOperationSpec
    );
  }

  /**
   * This operation retrieves a list of all the policy definitions in a given management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  private _listByManagementGroup(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listByManagementGroupOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextOptionalParams
  ): Promise<PolicyDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListBuiltInNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
   * @param options The options parameters.
   */
  private _listBuiltInNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextOperationSpec
    );
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  private _listNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupNextNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): Promise<
    PolicyDefinitionsListByManagementGroupNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<PolicyDefinitionsListNextNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicyDefinitionsListBuiltInNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicyDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuiltInOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyDefinitionName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
