/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicySetDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicySetDefinition,
  PolicySetDefinitionsListNextOptionalParams,
  PolicySetDefinitionsListOptionalParams,
  PolicySetDefinitionsListBuiltInNextOptionalParams,
  PolicySetDefinitionsListBuiltInOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupOptionalParams,
  PolicySetDefinitionsListNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListNextNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextOptionalParams,
  PolicySetDefinitionsCreateOrUpdateOptionalParams,
  PolicySetDefinitionsCreateOrUpdateResponse,
  PolicySetDefinitionsDeleteOptionalParams,
  PolicySetDefinitionsGetOptionalParams,
  PolicySetDefinitionsGetResponse,
  PolicySetDefinitionsGetBuiltInOptionalParams,
  PolicySetDefinitionsGetBuiltInResponse,
  PolicySetDefinitionsListResponse,
  PolicySetDefinitionsListBuiltInResponse,
  PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse,
  PolicySetDefinitionsDeleteAtManagementGroupOptionalParams,
  PolicySetDefinitionsGetAtManagementGroupOptionalParams,
  PolicySetDefinitionsGetAtManagementGroupResponse,
  PolicySetDefinitionsListByManagementGroupResponse,
  PolicySetDefinitionsListNextResponse,
  PolicySetDefinitionsListBuiltInNextResponse,
  PolicySetDefinitionsListByManagementGroupNextResponse,
  PolicySetDefinitionsListNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextResponse,
  PolicySetDefinitionsListNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextResponse,
  PolicySetDefinitionsListNextNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextResponse,
  PolicySetDefinitionsListNextNextNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextResponse,
  PolicySetDefinitionsListNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListNextNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListNextNextNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextNextResponse,
  PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicySetDefinitions operations. */
export class PolicySetDefinitionsImpl implements PolicySetDefinitions {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicySetDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   * @param options The options parameters.
   */
  public list(
    options?: PolicySetDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: PolicySetDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: PolicySetDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   * @param options The options parameters.
   */
  public listBuiltIn(
    options?: PolicySetDefinitionsListBuiltInOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInPagingPage(options);
      }
    };
  }

  private async *listBuiltInPagingPage(
    options?: PolicySetDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltIn(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInPagingAll(
    options?: PolicySetDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the a policy set definition in the given management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  public listByManagementGroup(
    managementGroupId: string,
    options?: PolicySetDefinitionsListByManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupPagingAll(
      managementGroupId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupPagingPage(managementGroupId, options);
      }
    };
  }

  private async *listByManagementGroupPagingPage(
    managementGroupId: string,
    options?: PolicySetDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroup(managementGroupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupPagingAll(
    managementGroupId: string,
    options?: PolicySetDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupPagingPage(
      managementGroupId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  public listNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
   * @param options The options parameters.
   */
  public listBuiltInNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
   * @param options The options parameters.
   */
  public listByManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  public listNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNext
   *                 method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBuiltInNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBuiltInNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBuiltInNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listBuiltInNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listBuiltInNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByManagementGroupNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listByManagementGroupNextNextNextNextNextNextNextPagingAll(
      managementGroupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupNextNextNextNextNextNextNextPagingPage(
          managementGroupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByManagementGroupNextNextNextNextNextNextNextPagingPage(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition[]> {
    let result = await this._listByManagementGroupNextNextNextNextNextNextNext(
      managementGroupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNextNextNextNextNextNextNextNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupNextNextNextNextNextNextNextPagingAll(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listByManagementGroupNextNextNextNextNextNextNextPagingPage(
      managementGroupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This operation creates or updates a policy set definition in the given subscription with the given
   * name.
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policySetDefinitionName: string,
    parameters: PolicySetDefinition,
    options?: PolicySetDefinitionsCreateOrUpdateOptionalParams
  ): Promise<PolicySetDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * This operation deletes the policy set definition in the given subscription with the given name.
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param options The options parameters.
   */
  delete(
    policySetDefinitionName: string,
    options?: PolicySetDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, options },
      deleteOperationSpec
    );
  }

  /**
   * This operation retrieves the policy set definition in the given subscription with the given name.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param options The options parameters.
   */
  get(
    policySetDefinitionName: string,
    options?: PolicySetDefinitionsGetOptionalParams
  ): Promise<PolicySetDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * This operation retrieves the built-in policy set definition with the given name.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param options The options parameters.
   */
  getBuiltIn(
    policySetDefinitionName: string,
    options?: PolicySetDefinitionsGetBuiltInOptionalParams
  ): Promise<PolicySetDefinitionsGetBuiltInResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, options },
      getBuiltInOperationSpec
    );
  }

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: PolicySetDefinitionsListOptionalParams
  ): Promise<PolicySetDefinitionsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   * @param options The options parameters.
   */
  private _listBuiltIn(
    options?: PolicySetDefinitionsListBuiltInOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBuiltInOperationSpec
    );
  }

  /**
   * This operation creates or updates a policy set definition in the given management group with the
   * given name.
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param managementGroupId The ID of the management group.
   * @param parameters The policy set definition properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    policySetDefinitionName: string,
    managementGroupId: string,
    parameters: PolicySetDefinition,
    options?: PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, managementGroupId, parameters, options },
      createOrUpdateAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation deletes the policy set definition in the given management group with the given name.
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    policySetDefinitionName: string,
    managementGroupId: string,
    options?: PolicySetDefinitionsDeleteAtManagementGroupOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, managementGroupId, options },
      deleteAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation retrieves the policy set definition in the given management group with the given
   * name.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    policySetDefinitionName: string,
    managementGroupId: string,
    options?: PolicySetDefinitionsGetAtManagementGroupOptionalParams
  ): Promise<PolicySetDefinitionsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, managementGroupId, options },
      getAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation retrieves a list of all the a policy set definition in the given management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  private _listByManagementGroup(
    managementGroupId: string,
    options?: PolicySetDefinitionsListByManagementGroupOptionalParams
  ): Promise<PolicySetDefinitionsListByManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listByManagementGroupOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListBuiltInNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
   * @param options The options parameters.
   */
  private _listBuiltInNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextOptionalParams
  ): Promise<PolicySetDefinitionsListByManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextOperationSpec
    );
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  private _listNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListByManagementGroupNextNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListByManagementGroupNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListByManagementGroupNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltInNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListByManagementGroupNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListBuiltInNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<PolicySetDefinitionsListNextNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBuiltInNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBuiltInNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBuiltInNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListBuiltInNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNextNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByManagementGroupNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNextNextNextNextNextNextNextNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    PolicySetDefinitionsListByManagementGroupNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuiltInOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policySetDefinitionName],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Authorization/policySetDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
