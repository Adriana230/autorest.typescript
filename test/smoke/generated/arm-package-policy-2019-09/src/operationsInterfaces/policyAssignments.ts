/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyAssignment,
  PolicyAssignmentsListForResourceGroupNextOptionalParams,
  PolicyAssignmentsListForResourceGroupOptionalParams,
  PolicyAssignmentsListForResourceNextOptionalParams,
  PolicyAssignmentsListForResourceOptionalParams,
  PolicyAssignmentsListForManagementGroupNextOptionalParams,
  PolicyAssignmentsListForManagementGroupOptionalParams,
  PolicyAssignmentsListNextOptionalParams,
  PolicyAssignmentsListOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextOptionalParams,
  PolicyAssignmentsListNextNextOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextNextOptionalParams,
  PolicyAssignmentsListNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextNextNextOptionalParams,
  PolicyAssignmentsListNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceGroupNextNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForResourceNextNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListForManagementGroupNextNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsListNextNextNextNextNextNextNextOptionalParams,
  PolicyAssignmentsDeleteOptionalParams,
  PolicyAssignmentsDeleteResponse,
  PolicyAssignmentsCreateOptionalParams,
  PolicyAssignmentsCreateResponse,
  PolicyAssignmentsGetOptionalParams,
  PolicyAssignmentsGetResponse,
  PolicyAssignmentsDeleteByIdOptionalParams,
  PolicyAssignmentsDeleteByIdResponse,
  PolicyAssignmentsCreateByIdOptionalParams,
  PolicyAssignmentsCreateByIdResponse,
  PolicyAssignmentsGetByIdOptionalParams,
  PolicyAssignmentsGetByIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyAssignments. */
export interface PolicyAssignments {
  /**
   * This operation retrieves the list of all policy assignments associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list
   * includes all policy assignments associated with the resource group, including those that apply
   * directly or apply from containing scopes, as well as any applied to resources contained within the
   * resource group. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource group, which is everything in the unfiltered list except those applied to
   * resources contained within the resource group. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value} that apply to the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * This operation retrieves the list of all policy assignments associated with the specified resource
   * in the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource, including those that
   * apply directly or from all containing scopes, as well as any applied to resources contained within
   * the resource. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource, which is everything in the unfiltered list except those applied to
   * resources contained within the resource. If $filter=policyDefinitionId eq '{value}' is provided, the
   * returned list includes all policy assignments of the policy definition whose id is {value} that
   * apply to the resource. Three parameters plus the resource name are used to identify a specific
   * resource. If the resource is not part of a parent resource (the more common case), the parent
   * resource path should not be provided (or provided as ''). For example a web app could be specified
   * as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * This operation retrieves the list of all policy assignments applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
   * '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that
   * are assigned to the management group or the management group's ancestors. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value} that apply to the management group.
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param options The options parameters.
   */
  listForManagementGroup(
    managementGroupId: string,
    filter: string,
    options?: PolicyAssignmentsListForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * This operation retrieves the list of all policy assignments associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects contained
   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
   * assignments that apply to the subscription, which is everything in the unfiltered list except those
   * applied to objects contained within the subscription. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value}.
   * @param options The options parameters.
   */
  list(
    options?: PolicyAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
   * @param options The options parameters.
   */
  listForResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListForResource method.
   * @param options The options parameters.
   */
  listForResourceNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
   * @param options The options parameters.
   */
  listForManagementGroupNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceNext method.
   * @param options The options parameters.
   */
  listForResourceNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroupNext
   *                 method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  listNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceNextNext
   *                 method.
   * @param options The options parameters.
   */
  listForResourceNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  listNextNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listForResourceNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForManagementGroupNextNextNext method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNextNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  listNextNextNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForManagementGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNextNextNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  listNextNextNextNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceNextNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForManagementGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNextNextNextNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForResourceNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForResourceNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForResourceNextNextNextNextNextNextNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListForManagementGroupNextNextNextNextNextNextNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListForManagementGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listForManagementGroupNextNextNextNextNextNextNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: PolicyAssignmentsListForManagementGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * This operation deletes a policy assignment, given its name and the scope it was created in. The
   * scope of a policy assignment is the part of its ID preceding
   * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsDeleteOptionalParams
  ): Promise<PolicyAssignmentsDeleteResponse>;
  /**
   *  This operation creates or updates a policy assignment with the given scope and name. Policy
   * assignments apply to all resources contained within their scope. For example, when you assign a
   * policy at resource group scope, that policy applies to all resources in the group.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The options parameters.
   */
  create(
    scope: string,
    policyAssignmentName: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateOptionalParams
  ): Promise<PolicyAssignmentsCreateResponse>;
  /**
   * This operation retrieves a single policy assignment, given its name and the scope it was created at.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsGetOptionalParams
  ): Promise<PolicyAssignmentsGetResponse>;
  /**
   * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats
   * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management
   * group), '/subscriptions/{subscriptionId}' (subscription),
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * (resource).
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The options parameters.
   */
  deleteById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsDeleteByIdOptionalParams
  ): Promise<PolicyAssignmentsDeleteByIdResponse>;
  /**
   * This operation creates or updates the policy assignment with the given ID. Policy assignments made
   * on a scope apply to all resources contained in that scope. For example, when you assign a policy to
   * a resource group that policy applies to all resources in the group. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param parameters Parameters for policy assignment.
   * @param options The options parameters.
   */
  createById(
    policyAssignmentId: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateByIdOptionalParams
  ): Promise<PolicyAssignmentsCreateByIdResponse>;
  /**
   * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The options parameters.
   */
  getById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsGetByIdOptionalParams
  ): Promise<PolicyAssignmentsGetByIdResponse>;
}
