/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to This operation creates or updates a policy set definition in the given management group with the given name.
 *
 * @summary This operation creates or updates a policy set definition in the given management group with the given name.
 */
import {
  PolicySetDefinition,
  PolicyClient
} from "@msinternal/arm-package-policy-2019-09";
import { DefaultAzureCredential } from "@azure/identity";

let client: PolicyClient;
//policySetDefinitions.createOrUpdateAtManagementGroup
async function createOrUpdateAPolicySetDefinitionWithGroupsAtManagementGroupLevel() {
  const policySetDefinitionName = "CostManagement";
  const managementGroupId = "MyManagementGroup";
  const parameters: PolicySetDefinition = {
    description: "Policies to enforce low cost storage SKUs",
    displayName: "Cost Management",
    metadata: { category: "Cost Management" },
    policyDefinitionGroups: [
      {
        name: "CostSaving",
        description:
          "Policies designed to control spend within a subscription.",
        displayName: "Cost Management Policies"
      },
      {
        name: "Organizational",
        description:
          "Policies that help enforce resource organization standards within a subscription.",
        displayName: "Organizational Policies"
      }
    ],
    policyDefinitions: [
      {
        groupNames: ["CostSaving"],
        parameters: {
          listOfAllowedSKUs: { value: ["Standard_GRS", "Standard_LRS"] }
        },
        policyDefinitionId:
          "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
        policyDefinitionReferenceId: "Limit_Skus"
      },
      {
        groupNames: ["Organizational"],
        parameters: { prefix: { value: "DeptA" }, suffix: { value: "-LC" } },
        policyDefinitionId:
          "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
        policyDefinitionReferenceId: "Resource_Naming"
      }
    ]
  };
  await client.policySetDefinitions
    .createOrUpdateAtManagementGroup(
      policySetDefinitionName,
      managementGroupId,
      parameters
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  client = new PolicyClient(credential, subscriptionId);
  await createOrUpdateAPolicySetDefinitionWithGroupsAtManagementGroupLevel();
}
main();
