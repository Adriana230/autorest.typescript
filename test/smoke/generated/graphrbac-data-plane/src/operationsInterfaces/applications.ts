/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import {
  Application,
  ApplicationsListOptionalParams,
  DirectoryObjectUnion,
  KeyCredential,
  PasswordCredential,
  ApplicationCreateParameters,
  ApplicationsCreateResponse,
  ApplicationsGetResponse,
  ApplicationUpdateParameters,
  AddOwnerParameters,
  KeyCredentialsUpdateParameters,
  PasswordCredentialsUpdateParameters,
  ApplicationsGetServicePrincipalsIdByAppIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Applications. */
export interface Applications {
  /**
   * Lists applications by filter parameters.
   * @param options The options parameters.
   */
  list(
    options?: ApplicationsListOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @param applicationObjectId The object ID of the application for which to get owners.
   * @param options The options parameters.
   */
  listOwners(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DirectoryObjectUnion>;
  /**
   * Get the keyCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  listKeyCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<KeyCredential>;
  /**
   * Get the passwordCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  listPasswordCredentials(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<PasswordCredential>;
  /**
   * Gets a list of applications from the current tenant.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Application>;
  /**
   * Create a new application.
   * @param parameters The parameters for creating an application.
   * @param options The options parameters.
   */
  create(
    parameters: ApplicationCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsCreateResponse>;
  /**
   * Delete an application.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  delete(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Get an application by object ID.
   * @param applicationObjectId Application object ID.
   * @param options The options parameters.
   */
  get(
    applicationObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsGetResponse>;
  /**
   * Update an existing application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update an existing application.
   * @param options The options parameters.
   */
  patch(
    applicationObjectId: string,
    parameters: ApplicationUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Add an owner to an application.
   * @param applicationObjectId The object ID of the application to which to add the owner.
   * @param parameters The URL of the owner object, such as
   *                   https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param options The options parameters.
   */
  addOwner(
    applicationObjectId: string,
    parameters: AddOwnerParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Remove a member from owners.
   * @param applicationObjectId The object ID of the application from which to remove the owner.
   * @param ownerObjectId Owner object id
   * @param options The options parameters.
   */
  removeOwner(
    applicationObjectId: string,
    ownerObjectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Update the keyCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update the keyCredentials of an existing application.
   * @param options The options parameters.
   */
  updateKeyCredentials(
    applicationObjectId: string,
    parameters: KeyCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Update passwordCredentials associated with an application.
   * @param applicationObjectId Application object ID.
   * @param parameters Parameters to update passwordCredentials of an existing application.
   * @param options The options parameters.
   */
  updatePasswordCredentials(
    applicationObjectId: string,
    parameters: PasswordCredentialsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets an object id for a given application id from the current tenant.
   * @param applicationID The application ID.
   * @param options The options parameters.
   */
  getServicePrincipalsIdByAppId(
    applicationID: string,
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationsGetServicePrincipalsIdByAppIdResponse>;
}
