/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Deployments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DeploymentExtended,
  DeploymentsListAtScopeNextOptionalParams,
  DeploymentsListAtScopeOptionalParams,
  DeploymentsListAtTenantScopeNextOptionalParams,
  DeploymentsListAtTenantScopeOptionalParams,
  DeploymentsListAtManagementGroupScopeNextOptionalParams,
  DeploymentsListAtManagementGroupScopeOptionalParams,
  DeploymentsListAtSubscriptionScopeNextOptionalParams,
  DeploymentsListAtSubscriptionScopeOptionalParams,
  DeploymentsListByResourceGroupNextOptionalParams,
  DeploymentsListByResourceGroupOptionalParams,
  DeploymentsListAtScopeNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtScopeNextNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextNextOptionalParams,
  DeploymentsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams,
  DeploymentsDeleteAtScopeOptionalParams,
  DeploymentsCheckExistenceAtScopeOptionalParams,
  Deployment,
  DeploymentsCreateOrUpdateAtScopeOptionalParams,
  DeploymentsCreateOrUpdateAtScopeResponse,
  DeploymentsGetAtScopeOptionalParams,
  DeploymentsGetAtScopeResponse,
  DeploymentsCancelAtScopeOptionalParams,
  DeploymentsValidateAtScopeOptionalParams,
  DeploymentsValidateAtScopeResponse,
  DeploymentsExportTemplateAtScopeOptionalParams,
  DeploymentsExportTemplateAtScopeResponse,
  DeploymentsListAtScopeResponse,
  DeploymentsDeleteAtTenantScopeOptionalParams,
  DeploymentsCheckExistenceAtTenantScopeOptionalParams,
  ScopedDeployment,
  DeploymentsCreateOrUpdateAtTenantScopeOptionalParams,
  DeploymentsCreateOrUpdateAtTenantScopeResponse,
  DeploymentsGetAtTenantScopeOptionalParams,
  DeploymentsGetAtTenantScopeResponse,
  DeploymentsCancelAtTenantScopeOptionalParams,
  DeploymentsValidateAtTenantScopeOptionalParams,
  DeploymentsValidateAtTenantScopeResponse,
  DeploymentsExportTemplateAtTenantScopeOptionalParams,
  DeploymentsExportTemplateAtTenantScopeResponse,
  DeploymentsListAtTenantScopeResponse,
  DeploymentsDeleteAtManagementGroupScopeOptionalParams,
  DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams,
  DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams,
  DeploymentsCreateOrUpdateAtManagementGroupScopeResponse,
  DeploymentsGetAtManagementGroupScopeOptionalParams,
  DeploymentsGetAtManagementGroupScopeResponse,
  DeploymentsCancelAtManagementGroupScopeOptionalParams,
  DeploymentsValidateAtManagementGroupScopeOptionalParams,
  DeploymentsValidateAtManagementGroupScopeResponse,
  DeploymentsExportTemplateAtManagementGroupScopeOptionalParams,
  DeploymentsExportTemplateAtManagementGroupScopeResponse,
  DeploymentsListAtManagementGroupScopeResponse,
  DeploymentsDeleteAtSubscriptionScopeOptionalParams,
  DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams,
  DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams,
  DeploymentsCreateOrUpdateAtSubscriptionScopeResponse,
  DeploymentsGetAtSubscriptionScopeOptionalParams,
  DeploymentsGetAtSubscriptionScopeResponse,
  DeploymentsCancelAtSubscriptionScopeOptionalParams,
  DeploymentsValidateAtSubscriptionScopeOptionalParams,
  DeploymentsValidateAtSubscriptionScopeResponse,
  DeploymentWhatIf,
  DeploymentsWhatIfAtSubscriptionScopeOptionalParams,
  DeploymentsWhatIfAtSubscriptionScopeResponse,
  DeploymentsExportTemplateAtSubscriptionScopeOptionalParams,
  DeploymentsExportTemplateAtSubscriptionScopeResponse,
  DeploymentsListAtSubscriptionScopeResponse,
  DeploymentsDeleteOptionalParams,
  DeploymentsCheckExistenceOptionalParams,
  DeploymentsCreateOrUpdateOptionalParams,
  DeploymentsCreateOrUpdateResponse,
  DeploymentsGetOptionalParams,
  DeploymentsGetResponse,
  DeploymentsCancelOptionalParams,
  DeploymentsValidateOptionalParams,
  DeploymentsValidateResponse,
  DeploymentsWhatIfOptionalParams,
  DeploymentsWhatIfResponse,
  DeploymentsExportTemplateOptionalParams,
  DeploymentsExportTemplateResponse,
  DeploymentsListByResourceGroupResponse,
  DeploymentsCalculateTemplateHashOptionalParams,
  DeploymentsCalculateTemplateHashResponse,
  DeploymentsListAtScopeNextResponse,
  DeploymentsListAtTenantScopeNextResponse,
  DeploymentsListAtManagementGroupScopeNextResponse,
  DeploymentsListAtSubscriptionScopeNextResponse,
  DeploymentsListByResourceGroupNextResponse,
  DeploymentsListAtScopeNextNextResponse,
  DeploymentsListAtTenantScopeNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextResponse,
  DeploymentsListByResourceGroupNextNextResponse,
  DeploymentsListAtScopeNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextResponse,
  DeploymentsListAtScopeNextNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextNextResponse,
  DeploymentsListAtScopeNextNextNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextNextNextResponse,
  DeploymentsListAtScopeNextNextNextNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextNextNextNextResponse,
  DeploymentsListAtScopeNextNextNextNextNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextNextNextNextNextResponse,
  DeploymentsListAtScopeNextNextNextNextNextNextNextNextResponse,
  DeploymentsListAtTenantScopeNextNextNextNextNextNextNextNextResponse,
  DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextNextResponse,
  DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextNextResponse,
  DeploymentsListByResourceGroupNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Deployments operations. */
export class DeploymentsImpl implements Deployments {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class Deployments class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Get all the deployments at the given scope.
   * @param scope The scope of a deployment.
   * @param options The options parameters.
   */
  public listAtScope(
    scope: string,
    options?: DeploymentsListAtScopeOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopePagingPage(scope, options);
      }
    };
  }

  private async *listAtScopePagingPage(
    scope: string,
    options?: DeploymentsListAtScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScope(scope, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopePagingAll(
    scope: string,
    options?: DeploymentsListAtScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get all the deployments at the tenant scope.
   * @param options The options parameters.
   */
  public listAtTenantScope(
    options?: DeploymentsListAtTenantScopeOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopePagingPage(options);
      }
    };
  }

  private async *listAtTenantScopePagingPage(
    options?: DeploymentsListAtTenantScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScope(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopePagingAll(
    options?: DeploymentsListAtTenantScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopePagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a management group.
   * @param groupId The management group ID.
   * @param options The options parameters.
   */
  public listAtManagementGroupScope(
    groupId: string,
    options?: DeploymentsListAtManagementGroupScopeOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopePagingAll(groupId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopePagingPage(groupId, options);
      }
    };
  }

  private async *listAtManagementGroupScopePagingPage(
    groupId: string,
    options?: DeploymentsListAtManagementGroupScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScope(groupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopePagingAll(
    groupId: string,
    options?: DeploymentsListAtManagementGroupScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopePagingPage(
      groupId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a subscription.
   * @param options The options parameters.
   */
  public listAtSubscriptionScope(
    options?: DeploymentsListAtSubscriptionScopeOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopePagingPage(options);
      }
    };
  }

  private async *listAtSubscriptionScopePagingPage(
    options?: DeploymentsListAtSubscriptionScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScope(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopePagingAll(
    options?: DeploymentsListAtSubscriptionScopeOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopePagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get all the deployments for a resource group.
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: DeploymentsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: DeploymentsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: DeploymentsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
   * @param options The options parameters.
   */
  public listAtScopeNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextPagingAll(scope, nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextPagingPage(scope, nextLink, options);
      }
    };
  }

  private async *listAtScopeNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNext(scope, nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtTenantScopeNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
   *                 method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
   *                 method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtSubscriptionScopeNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  public listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNext method.
   * @param options The options parameters.
   */
  public listAtScopeNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextPagingAll(scope, nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextPagingPage(scope, nextLink, options);
      }
    };
  }

  private async *listAtScopeNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNext(scope, nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNext method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtTenantScopeNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScopeNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScopeNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNext method.
   * @param options The options parameters.
   */
  public listAtScopeNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextNextPagingPage(scope, nextLink, options);
      }
    };
  }

  private async *listAtScopeNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNextNext(scope, nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listAtTenantScopeNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNext method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtScopeNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtScopeNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtTenantScopeNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNext method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNextNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listAtScopeNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtScopeNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtTenantScopeNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextNextNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextNextNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNextNextNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNextNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextNextNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtScopeNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtScopeNextNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtTenantScopeNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextNextNextNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextNextNextNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNextNextNextNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNextNextNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextNextNextNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtScopeNextNextNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtScopeNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtScopeNextNextNextNextNextNextNextPagingAll(
      scope,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtScopeNextNextNextNextNextNextNextPagingPage(
          scope,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtScopeNextNextNextNextNextNextNextPagingPage(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtScopeNextNextNextNextNextNextNext(
      scope,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtScopeNextNextNextNextNextNextNextNext(
        scope,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtScopeNextNextNextNextNextNextNextPagingAll(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtScopeNextNextNextNextNextNextNextPagingPage(
      scope,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtTenantScopeNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtTenantScopeNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtTenantScopeNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtTenantScopeNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtTenantScopeNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtTenantScopeNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtTenantScopeNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtTenantScopeNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtTenantScopeNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtManagementGroupScopeNextNextNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtManagementGroupScopeNextNextNextNextNextNextNextPagingAll(
      groupId,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtManagementGroupScopeNextNextNextNextNextNextNextPagingPage(
          groupId,
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextNextNextPagingPage(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtManagementGroupScopeNextNextNextNextNextNextNext(
      groupId,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtManagementGroupScopeNextNextNextNextNextNextNextNext(
        groupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtManagementGroupScopeNextNextNextNextNextNextNextPagingAll(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtManagementGroupScopeNextNextNextNextNextNextNextPagingPage(
      groupId,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listAtSubscriptionScopeNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listAtSubscriptionScopeNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAtSubscriptionScopeNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listAtSubscriptionScopeNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAtSubscriptionScopeNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAtSubscriptionScopeNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listAtSubscriptionScopeNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<DeploymentExtended> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<DeploymentExtended> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentsDeleteAtScopeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, deploymentName, options },
      deleteAtScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtScopeAndWait(
    scope: string,
    deploymentName: string,
    options?: DeploymentsDeleteAtScopeOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteAtScope(
      scope,
      deploymentName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  checkExistenceAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentsCheckExistenceAtScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, options },
      checkExistenceAtScopeOperationSpec
    );
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtScope(
    scope: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateAtScopeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtScopeResponse>,
      DeploymentsCreateOrUpdateAtScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, deploymentName, parameters, options },
      createOrUpdateAtScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtScopeAndWait(
    scope: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateAtScopeOptionalParams
  ): Promise<DeploymentsCreateOrUpdateAtScopeResponse> {
    const poller = await this.beginCreateOrUpdateAtScope(
      scope,
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  getAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentsGetAtScopeOptionalParams
  ): Promise<DeploymentsGetAtScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, options },
      getAtScopeOperationSpec
    );
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  cancelAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentsCancelAtScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, options },
      cancelAtScopeOperationSpec
    );
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  validateAtScope(
    scope: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsValidateAtScopeOptionalParams
  ): Promise<DeploymentsValidateAtScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, parameters, options },
      validateAtScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   * @param scope The scope of a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  exportTemplateAtScope(
    scope: string,
    deploymentName: string,
    options?: DeploymentsExportTemplateAtScopeOptionalParams
  ): Promise<DeploymentsExportTemplateAtScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, deploymentName, options },
      exportTemplateAtScopeOperationSpec
    );
  }

  /**
   * Get all the deployments at the given scope.
   * @param scope The scope of a deployment.
   * @param options The options parameters.
   */
  private _listAtScope(
    scope: string,
    options?: DeploymentsListAtScopeOptionalParams
  ): Promise<DeploymentsListAtScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listAtScopeOperationSpec
    );
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtTenantScope(
    deploymentName: string,
    options?: DeploymentsDeleteAtTenantScopeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, options },
      deleteAtTenantScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtTenantScopeAndWait(
    deploymentName: string,
    options?: DeploymentsDeleteAtTenantScopeOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteAtTenantScope(deploymentName, options);
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  checkExistenceAtTenantScope(
    deploymentName: string,
    options?: DeploymentsCheckExistenceAtTenantScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      checkExistenceAtTenantScopeOperationSpec
    );
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtTenantScope(
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsCreateOrUpdateAtTenantScopeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtTenantScopeResponse>,
      DeploymentsCreateOrUpdateAtTenantScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtTenantScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, parameters, options },
      createOrUpdateAtTenantScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtTenantScopeAndWait(
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsCreateOrUpdateAtTenantScopeOptionalParams
  ): Promise<DeploymentsCreateOrUpdateAtTenantScopeResponse> {
    const poller = await this.beginCreateOrUpdateAtTenantScope(
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  getAtTenantScope(
    deploymentName: string,
    options?: DeploymentsGetAtTenantScopeOptionalParams
  ): Promise<DeploymentsGetAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      getAtTenantScopeOperationSpec
    );
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  cancelAtTenantScope(
    deploymentName: string,
    options?: DeploymentsCancelAtTenantScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      cancelAtTenantScopeOperationSpec
    );
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  validateAtTenantScope(
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsValidateAtTenantScopeOptionalParams
  ): Promise<DeploymentsValidateAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, parameters, options },
      validateAtTenantScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  exportTemplateAtTenantScope(
    deploymentName: string,
    options?: DeploymentsExportTemplateAtTenantScopeOptionalParams
  ): Promise<DeploymentsExportTemplateAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      exportTemplateAtTenantScopeOperationSpec
    );
  }

  /**
   * Get all the deployments at the tenant scope.
   * @param options The options parameters.
   */
  private _listAtTenantScope(
    options?: DeploymentsListAtTenantScopeOptionalParams
  ): Promise<DeploymentsListAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAtTenantScopeOperationSpec
    );
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsDeleteAtManagementGroupScopeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { groupId, deploymentName, options },
      deleteAtManagementGroupScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtManagementGroupScopeAndWait(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsDeleteAtManagementGroupScopeOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteAtManagementGroupScope(
      groupId,
      deploymentName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  checkExistenceAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, options },
      checkExistenceAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        DeploymentsCreateOrUpdateAtManagementGroupScopeResponse
      >,
      DeploymentsCreateOrUpdateAtManagementGroupScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { groupId, deploymentName, parameters, options },
      createOrUpdateAtManagementGroupScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtManagementGroupScopeAndWait(
    groupId: string,
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse> {
    const poller = await this.beginCreateOrUpdateAtManagementGroupScope(
      groupId,
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  getAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsGetAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentsGetAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, options },
      getAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  cancelAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsCancelAtManagementGroupScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, options },
      cancelAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  validateAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    parameters: ScopedDeployment,
    options?: DeploymentsValidateAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentsValidateAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, parameters, options },
      validateAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * Exports the template used for specified deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  exportTemplateAtManagementGroupScope(
    groupId: string,
    deploymentName: string,
    options?: DeploymentsExportTemplateAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentsExportTemplateAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      { groupId, deploymentName, options },
      exportTemplateAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * Get all the deployments for a management group.
   * @param groupId The management group ID.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScope(
    groupId: string,
    options?: DeploymentsListAtManagementGroupScopeOptionalParams
  ): Promise<DeploymentsListAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      listAtManagementGroupScopeOperationSpec
    );
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, options },
      deleteAtSubscriptionScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. This is an asynchronous operation that returns a
   * status of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running, a
   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
   * URI in the Location header returns an error-level status code.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAtSubscriptionScopeAndWait(
    deploymentName: string,
    options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteAtSubscriptionScope(
      deploymentName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  checkExistenceAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      checkExistenceAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtSubscriptionScope(
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>,
      DeploymentsCreateOrUpdateAtSubscriptionScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, parameters, options },
      createOrUpdateAtSubscriptionScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtSubscriptionScopeAndWait(
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse> {
    const poller = await this.beginCreateOrUpdateAtSubscriptionScope(
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  getAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentsGetAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsGetAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      getAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resources partially deployed.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  cancelAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentsCancelAtSubscriptionScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      cancelAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  validateAtSubscriptionScope(
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsValidateAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsValidateAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, parameters, options },
      validateAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the subscription.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to What If.
   * @param options The options parameters.
   */
  async beginWhatIfAtSubscriptionScope(
    deploymentName: string,
    parameters: DeploymentWhatIf,
    options?: DeploymentsWhatIfAtSubscriptionScopeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsWhatIfAtSubscriptionScopeResponse>,
      DeploymentsWhatIfAtSubscriptionScopeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsWhatIfAtSubscriptionScopeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deploymentName, parameters, options },
      whatIfAtSubscriptionScopeOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the subscription.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to What If.
   * @param options The options parameters.
   */
  async beginWhatIfAtSubscriptionScopeAndWait(
    deploymentName: string,
    parameters: DeploymentWhatIf,
    options?: DeploymentsWhatIfAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsWhatIfAtSubscriptionScopeResponse> {
    const poller = await this.beginWhatIfAtSubscriptionScope(
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Exports the template used for specified deployment.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  exportTemplateAtSubscriptionScope(
    deploymentName: string,
    options?: DeploymentsExportTemplateAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsExportTemplateAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      { deploymentName, options },
      exportTemplateAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * Get all the deployments for a subscription.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScope(
    options?: DeploymentsListAtSubscriptionScopeOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAtSubscriptionScopeOperationSpec
    );
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. Deleting a template deployment does not affect the
   * state of the resource group. This is an asynchronous operation that returns a status of 202 until
   * the template deployment is successfully deleted. The Location response header contains the URI that
   * is used to obtain the status of the process. While the process is running, a call to the URI in the
   * Location header returns a status of 202. When the process finishes, the URI in the Location header
   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
   * header returns an error-level status code.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
   *                          case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, deploymentName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template deployment
   * removes the associated deployment operations. Deleting a template deployment does not affect the
   * state of the resource group. This is an asynchronous operation that returns a status of 202 until
   * the template deployment is successfully deleted. The Location response header contains the URI that
   * is used to obtain the status of the process. While the process is running, a call to the URI in the
   * Location header returns a status of 202. When the process finishes, the URI in the Location header
   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
   * header returns an error-level status code.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
   *                          case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      deploymentName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the deployment exists.
   * @param resourceGroupName The name of the resource group with the deployment to check. The name is
   *                          case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  checkExistence(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsCheckExistenceOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, options },
      checkExistenceOperationSpec
    );
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
   *                          insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsCreateOrUpdateResponse>,
      DeploymentsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, deploymentName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
   *                          insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsCreateOrUpdateOptionalParams
  ): Promise<DeploymentsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsGetOptionalParams
  ): Promise<DeploymentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, options },
      getOperationSpec
    );
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
   * stops the currently running template deployment and leaves the resource group partially deployed.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  cancel(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsCancelOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, options },
      cancelOperationSpec
    );
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param resourceGroupName The name of the resource group the template will be deployed to. The name
   *                          is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  validate(
    resourceGroupName: string,
    deploymentName: string,
    parameters: Deployment,
    options?: DeploymentsValidateOptionalParams
  ): Promise<DeploymentsValidateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, parameters, options },
      validateOperationSpec
    );
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource group.
   * @param resourceGroupName The name of the resource group the template will be deployed to. The name
   *                          is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  async beginWhatIf(
    resourceGroupName: string,
    deploymentName: string,
    parameters: DeploymentWhatIf,
    options?: DeploymentsWhatIfOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeploymentsWhatIfResponse>,
      DeploymentsWhatIfResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeploymentsWhatIfResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, deploymentName, parameters, options },
      whatIfOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource group.
   * @param resourceGroupName The name of the resource group the template will be deployed to. The name
   *                          is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The options parameters.
   */
  async beginWhatIfAndWait(
    resourceGroupName: string,
    deploymentName: string,
    parameters: DeploymentWhatIf,
    options?: DeploymentsWhatIfOptionalParams
  ): Promise<DeploymentsWhatIfResponse> {
    const poller = await this.beginWhatIf(
      resourceGroupName,
      deploymentName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Exports the template used for specified deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The options parameters.
   */
  exportTemplate(
    resourceGroupName: string,
    deploymentName: string,
    options?: DeploymentsExportTemplateOptionalParams
  ): Promise<DeploymentsExportTemplateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentName, options },
      exportTemplateOperationSpec
    );
  }

  /**
   * Get all the deployments for a resource group.
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: DeploymentsListByResourceGroupOptionalParams
  ): Promise<DeploymentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Calculate the hash of the given template.
   * @param template The template provided to calculate hash.
   * @param options The options parameters.
   */
  calculateTemplateHash(
    template: Record<string, unknown>,
    options?: DeploymentsCalculateTemplateHashOptionalParams
  ): Promise<DeploymentsCalculateTemplateHashResponse> {
    return this.client.sendOperationRequest(
      { template, options },
      calculateTemplateHashOperationSpec
    );
  }

  /**
   * ListAtScopeNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
   * @param options The options parameters.
   */
  private _listAtScopeNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
   *                 method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextOptionalParams
  ): Promise<DeploymentsListAtManagementGroupScopeNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNext method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNext method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScopeNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextOptionalParams
  ): Promise<DeploymentsListAtManagementGroupScopeNextNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScopeNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNext method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextOptionalParams
  ): Promise<DeploymentsListAtManagementGroupScopeNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAtTenantScopeNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtManagementGroupScopeNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the ListAtScopeNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtManagementGroupScopeNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtSubscriptionScopeNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListByResourceGroupNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtTenantScopeNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListByResourceGroupNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtScopeNextNextNextNextNextNextNextNext
   * @param scope The scope of a deployment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtScopeNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtScopeNextNextNextNextNextNextNextNext(
    scope: string,
    nextLink: string,
    options?: DeploymentsListAtScopeNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<DeploymentsListAtScopeNextNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listAtScopeNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtTenantScopeNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtTenantScopeNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtTenantScopeNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtTenantScopeNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtTenantScopeNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtTenantScopeNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtManagementGroupScopeNextNextNextNextNextNextNextNext
   * @param groupId The management group ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtManagementGroupScopeNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupScopeNextNextNextNextNextNextNextNext(
    groupId: string,
    nextLink: string,
    options?: DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtManagementGroupScopeNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listAtManagementGroupScopeNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListAtSubscriptionScopeNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAtSubscriptionScopeNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionScopeNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListAtSubscriptionScopeNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionScopeNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    DeploymentsListByResourceGroupNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkExistenceAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateAtScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateAtScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.deploymentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/deployments/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const checkExistenceAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const validateAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.deploymentName],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/deployments/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkExistenceAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkExistenceAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const whatIfAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    201: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    202: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    204: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkExistenceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    202: {
      bodyMapper: Mappers.DeploymentExtended
    },
    204: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const whatIfOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    201: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    202: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    204: {
      bodyMapper: Mappers.WhatIfOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deploymentName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const calculateTemplateHashOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/calculateTemplateHash",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateHashResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.template,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAtScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtScopeNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtTenantScopeNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtManagementGroupScopeNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAtSubscriptionScopeNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
