/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ResourceGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ResourceGroup,
  ResourceGroupsListNextOptionalParams,
  ResourceGroupsListOptionalParams,
  ResourceGroupsListNextNextOptionalParams,
  ResourceGroupsListNextNextNextOptionalParams,
  ResourceGroupsListNextNextNextNextOptionalParams,
  ResourceGroupsListNextNextNextNextNextOptionalParams,
  ResourceGroupsListNextNextNextNextNextNextOptionalParams,
  ResourceGroupsListNextNextNextNextNextNextNextOptionalParams,
  ResourceGroupsListNextNextNextNextNextNextNextNextOptionalParams,
  ResourceGroupsCheckExistenceOptionalParams,
  ResourceGroupsCreateOrUpdateOptionalParams,
  ResourceGroupsCreateOrUpdateResponse,
  ResourceGroupsDeleteOptionalParams,
  ResourceGroupsGetOptionalParams,
  ResourceGroupsGetResponse,
  ResourceGroupPatchable,
  ResourceGroupsUpdateOptionalParams,
  ResourceGroupsUpdateResponse,
  ExportTemplateRequest,
  ResourceGroupsExportTemplateOptionalParams,
  ResourceGroupsExportTemplateResponse,
  ResourceGroupsListResponse,
  ResourceGroupsListNextResponse,
  ResourceGroupsListNextNextResponse,
  ResourceGroupsListNextNextNextResponse,
  ResourceGroupsListNextNextNextNextResponse,
  ResourceGroupsListNextNextNextNextNextResponse,
  ResourceGroupsListNextNextNextNextNextNextResponse,
  ResourceGroupsListNextNextNextNextNextNextNextResponse,
  ResourceGroupsListNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceGroups operations. */
export class ResourceGroupsImpl implements ResourceGroups {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class ResourceGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the resource groups for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: ResourceGroupsListOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ResourceGroupsListOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ResourceGroupsListOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  public listNext(
    nextLink: string,
    options?: ResourceGroupsListNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  public listNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextPagingPage(nextLink, options)) {
      yield* page;
    }
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextNextNextNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNextNextNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ResourceGroup> {
    const iter = this.listNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup[]> {
    let result = await this._listNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ResourceGroup> {
    for await (const page of this.listNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Checks whether a resource group exists.
   * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
   * @param options The options parameters.
   */
  checkExistence(
    resourceGroupName: string,
    options?: ResourceGroupsCheckExistenceOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      checkExistenceOperationSpec
    );
  }

  /**
   * Creates or updates a resource group.
   * @param resourceGroupName The name of the resource group to create or update. Can include
   *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that
   *                          match the allowed characters.
   * @param parameters Parameters supplied to the create or update a resource group.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    parameters: ResourceGroup,
    options?: ResourceGroupsCreateOrUpdateOptionalParams
  ): Promise<ResourceGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
   * deletes all of its template deployments and currently stored operations.
   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    options?: ResourceGroupsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
   * deletes all of its template deployments and currently stored operations.
   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    options?: ResourceGroupsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(resourceGroupName, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets a resource group.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: ResourceGroupsGetOptionalParams
  ): Promise<ResourceGroupsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Resource groups can be updated through a simple PATCH operation to a group address. The format of
   * the request is the same as that for creating a resource group. If a field is unspecified, the
   * current value is retained.
   * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
   * @param parameters Parameters supplied to update a resource group.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    parameters: ResourceGroupPatchable,
    options?: ResourceGroupsUpdateOptionalParams
  ): Promise<ResourceGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Captures the specified resource group as a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters for exporting the template.
   * @param options The options parameters.
   */
  async beginExportTemplate(
    resourceGroupName: string,
    parameters: ExportTemplateRequest,
    options?: ResourceGroupsExportTemplateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ResourceGroupsExportTemplateResponse>,
      ResourceGroupsExportTemplateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ResourceGroupsExportTemplateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, parameters, options },
      exportTemplateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Captures the specified resource group as a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters for exporting the template.
   * @param options The options parameters.
   */
  async beginExportTemplateAndWait(
    resourceGroupName: string,
    parameters: ExportTemplateRequest,
    options?: ResourceGroupsExportTemplateOptionalParams
  ): Promise<ResourceGroupsExportTemplateResponse> {
    const poller = await this.beginExportTemplate(
      resourceGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets all the resource groups for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: ResourceGroupsListOptionalParams
  ): Promise<ResourceGroupsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ResourceGroupsListNextOptionalParams
  ): Promise<ResourceGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  private _listNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ResourceGroupsListNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<ResourceGroupsListNextNextNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkExistenceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroup
    },
    201: {
      bodyMapper: Mappers.ResourceGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const exportTemplateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupExportResult
    },
    201: {
      bodyMapper: Mappers.ResourceGroupExportResult
    },
    202: {
      bodyMapper: Mappers.ResourceGroupExportResult
    },
    204: {
      bodyMapper: Mappers.ResourceGroupExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
