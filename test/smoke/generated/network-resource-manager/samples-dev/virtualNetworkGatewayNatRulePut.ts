/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Creates a nat rule to a scalable virtual network gateway if it doesn't exist else updates the existing nat rules.
 *
 * @summary Creates a nat rule to a scalable virtual network gateway if it doesn't exist else updates the existing nat rules.
 */
import {
  VirtualNetworkGatewayNatRule,
  NetworkManagementClient
} from "@msinternal/network-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: NetworkManagementClient;
//virtualNetworkGatewayNatRules.beginCreateOrUpdateAndWait
async function virtualNetworkGatewayNatRulePut() {
  const resourceGroupName = "rg1";
  const virtualNetworkGatewayName = "gateway1";
  const natRuleName = "natRule1";
  const natRuleParameters: VirtualNetworkGatewayNatRule = {
    typePropertiesType: "Static",
    externalMappings: [
      { addressSpace: "192.168.21.0/24", portRange: "300-400" }
    ],
    internalMappings: [{ addressSpace: "10.4.0.0/24", portRange: "200-300" }],
    ipConfigurationId:
      "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/ipConfigurations/default",
    mode: "EgressSnat"
  };
  await client.virtualNetworkGatewayNatRules
    .beginCreateOrUpdateAndWait(
      resourceGroupName,
      virtualNetworkGatewayName,
      natRuleName,
      natRuleParameters
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "subid";
  client = new NetworkManagementClient(credential, subscriptionId);
  await virtualNetworkGatewayNatRulePut();
}
main();
