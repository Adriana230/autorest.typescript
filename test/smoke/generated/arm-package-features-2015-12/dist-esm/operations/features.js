/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import "@azure/core-paging";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class representing a Features. */
export class FeaturesImpl {
    /**
     * Initialize a new instance of the class Features class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the preview features that are available through AFEC for the subscription.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listAllPagingPage(options);
            }
        };
    }
    listAllPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result = yield __await(this._listAll(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listAllPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listAllPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the preview features in a provider namespace that are available through AFEC for the
     * subscription.
     * @param resourceProviderNamespace The namespace of the resource provider for getting features.
     * @param options The options parameters.
     */
    list(resourceProviderNamespace, options) {
        const iter = this.listPagingAll(resourceProviderNamespace, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceProviderNamespace, options);
            }
        };
    }
    listPagingPage(resourceProviderNamespace, options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(resourceProviderNamespace, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(resourceProviderNamespace, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(resourceProviderNamespace, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(resourceProviderNamespace, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all the preview features that are available through AFEC for the subscription.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Gets all the preview features in a provider namespace that are available through AFEC for the
     * subscription.
     * @param resourceProviderNamespace The namespace of the resource provider for getting features.
     * @param options The options parameters.
     */
    _list(resourceProviderNamespace, options) {
        return this.client.sendOperationRequest({ resourceProviderNamespace, options }, listOperationSpec);
    }
    /**
     * Gets the preview feature with the specified name.
     * @param resourceProviderNamespace The resource provider namespace for the feature.
     * @param featureName The name of the feature to get.
     * @param options The options parameters.
     */
    get(resourceProviderNamespace, featureName, options) {
        return this.client.sendOperationRequest({ resourceProviderNamespace, featureName, options }, getOperationSpec);
    }
    /**
     * Registers the preview feature for the subscription.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param featureName The name of the feature to register.
     * @param options The options parameters.
     */
    register(resourceProviderNamespace, featureName, options) {
        return this.client.sendOperationRequest({ resourceProviderNamespace, featureName, options }, registerOperationSpec);
    }
    /**
     * Unregisters the preview feature for the subscription.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param featureName The name of the feature to unregister.
     * @param options The options parameters.
     */
    unregister(resourceProviderNamespace, featureName, options) {
        return this.client.sendOperationRequest({ resourceProviderNamespace, featureName, options }, unregisterOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceProviderNamespace The namespace of the resource provider for getting features.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceProviderNamespace, nextLink, options) {
        return this.client.sendOperationRequest({ resourceProviderNamespace, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/features",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureOperationsListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureOperationsListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.featureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const registerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/register",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.featureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const unregisterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/unregister",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace,
        Parameters.featureName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureOperationsListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FeatureOperationsListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceProviderNamespace
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=features.js.map