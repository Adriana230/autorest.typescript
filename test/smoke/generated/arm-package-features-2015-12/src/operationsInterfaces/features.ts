/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  FeatureResult,
  FeaturesListAllNextOptionalParams,
  FeaturesListAllOptionalParams,
  FeaturesListNextOptionalParams,
  FeaturesListOptionalParams,
  FeaturesListAllNextNextOptionalParams,
  FeaturesListNextNextOptionalParams,
  FeaturesListAllNextNextNextOptionalParams,
  FeaturesListNextNextNextOptionalParams,
  FeaturesListAllNextNextNextNextOptionalParams,
  FeaturesListNextNextNextNextOptionalParams,
  FeaturesListAllNextNextNextNextNextOptionalParams,
  FeaturesListNextNextNextNextNextOptionalParams,
  FeaturesListAllNextNextNextNextNextNextOptionalParams,
  FeaturesListNextNextNextNextNextNextOptionalParams,
  FeaturesListAllNextNextNextNextNextNextNextOptionalParams,
  FeaturesListNextNextNextNextNextNextNextOptionalParams,
  FeaturesGetOptionalParams,
  FeaturesGetResponse,
  FeaturesRegisterOptionalParams,
  FeaturesRegisterResponse,
  FeaturesUnregisterOptionalParams,
  FeaturesUnregisterResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Features. */
export interface Features {
  /**
   * Gets all the preview features that are available through AFEC for the subscription.
   * @param options The options parameters.
   */
  listAll(
    options?: FeaturesListAllOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * Gets all the preview features in a provider namespace that are available through AFEC for the
   * subscription.
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param options The options parameters.
   */
  list(
    resourceProviderNamespace: string,
    options?: FeaturesListOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  listAllNext(
    nextLink: string,
    options?: FeaturesListAllNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAllNext method.
   * @param options The options parameters.
   */
  listAllNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNext method.
   * @param options The options parameters.
   */
  listNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAllNextNext method.
   * @param options The options parameters.
   */
  listAllNextNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNextNext method.
   * @param options The options parameters.
   */
  listNextNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAllNextNextNext method.
   * @param options The options parameters.
   */
  listAllNextNextNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNextNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNext method.
   * @param options The options parameters.
   */
  listNextNextNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAllNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listAllNextNextNextNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNextNextNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNext method.
   * @param options The options parameters.
   */
  listNextNextNextNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListAllNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listAllNextNextNextNextNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNextNextNextNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listNextNextNextNextNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListAllNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAllNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listAllNextNextNextNextNextNextNext(
    nextLink: string,
    options?: FeaturesListAllNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * ListNextNextNextNextNextNextNext
   * @param resourceProviderNamespace The namespace of the resource provider for getting features.
   * @param nextLink The nextLink from the previous successful call to the ListNextNextNextNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listNextNextNextNextNextNextNext(
    resourceProviderNamespace: string,
    nextLink: string,
    options?: FeaturesListNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<FeatureResult>;
  /**
   * Gets the preview feature with the specified name.
   * @param resourceProviderNamespace The resource provider namespace for the feature.
   * @param featureName The name of the feature to get.
   * @param options The options parameters.
   */
  get(
    resourceProviderNamespace: string,
    featureName: string,
    options?: FeaturesGetOptionalParams
  ): Promise<FeaturesGetResponse>;
  /**
   * Registers the preview feature for the subscription.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param featureName The name of the feature to register.
   * @param options The options parameters.
   */
  register(
    resourceProviderNamespace: string,
    featureName: string,
    options?: FeaturesRegisterOptionalParams
  ): Promise<FeaturesRegisterResponse>;
  /**
   * Unregisters the preview feature for the subscription.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param featureName The name of the feature to unregister.
   * @param options The options parameters.
   */
  unregister(
    resourceProviderNamespace: string,
    featureName: string,
    options?: FeaturesUnregisterOptionalParams
  ): Promise<FeaturesUnregisterResponse>;
}
