/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem} that the service accepts. */
export var KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem;
(function (KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem) {
    KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem["RegistrationStatusNotSupportedForRenewal"] = "RegistrationStatusNotSupportedForRenewal";
    KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem["ExpirationNotInRenewalTimeRange"] = "ExpirationNotInRenewalTimeRange";
    KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem["SubscriptionNotActive"] = "SubscriptionNotActive";
})(KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem || (KnownAppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem = {}));
/** Known values of {@link AppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem} that the service accepts. */
export var KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem;
(function (KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem) {
    KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem["RegistrationStatusNotSupportedForRenewal"] = "RegistrationStatusNotSupportedForRenewal";
    KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem["ExpirationNotInRenewalTimeRange"] = "ExpirationNotInRenewalTimeRange";
    KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem["SubscriptionNotActive"] = "SubscriptionNotActive";
})(KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem || (KnownAppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem = {}));
/** Known values of {@link DomainPropertiesDomainNotRenewableReasonsItem} that the service accepts. */
export var KnownDomainPropertiesDomainNotRenewableReasonsItem;
(function (KnownDomainPropertiesDomainNotRenewableReasonsItem) {
    KnownDomainPropertiesDomainNotRenewableReasonsItem["RegistrationStatusNotSupportedForRenewal"] = "RegistrationStatusNotSupportedForRenewal";
    KnownDomainPropertiesDomainNotRenewableReasonsItem["ExpirationNotInRenewalTimeRange"] = "ExpirationNotInRenewalTimeRange";
    KnownDomainPropertiesDomainNotRenewableReasonsItem["SubscriptionNotActive"] = "SubscriptionNotActive";
})(KnownDomainPropertiesDomainNotRenewableReasonsItem || (KnownDomainPropertiesDomainNotRenewableReasonsItem = {}));
/** Known values of {@link DomainPatchResourcePropertiesDomainNotRenewableReasonsItem} that the service accepts. */
export var KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem;
(function (KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem) {
    KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem["RegistrationStatusNotSupportedForRenewal"] = "RegistrationStatusNotSupportedForRenewal";
    KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem["ExpirationNotInRenewalTimeRange"] = "ExpirationNotInRenewalTimeRange";
    KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem["SubscriptionNotActive"] = "SubscriptionNotActive";
})(KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem || (KnownDomainPatchResourcePropertiesDomainNotRenewableReasonsItem = {}));
/** Known values of {@link Enum4} that the service accepts. */
export var KnownEnum4;
(function (KnownEnum4) {
    KnownEnum4["Windows"] = "Windows";
    KnownEnum4["Linux"] = "Linux";
    KnownEnum4["WindowsFunctions"] = "WindowsFunctions";
    KnownEnum4["LinuxFunctions"] = "LinuxFunctions";
})(KnownEnum4 || (KnownEnum4 = {}));
/** Known values of {@link Enum5} that the service accepts. */
export var KnownEnum5;
(function (KnownEnum5) {
    KnownEnum5["Windows"] = "Windows";
    KnownEnum5["Linux"] = "Linux";
    KnownEnum5["WindowsFunctions"] = "WindowsFunctions";
    KnownEnum5["LinuxFunctions"] = "LinuxFunctions";
})(KnownEnum5 || (KnownEnum5 = {}));
/** Known values of {@link ResourceScopeType} that the service accepts. */
export var KnownResourceScopeType;
(function (KnownResourceScopeType) {
    KnownResourceScopeType["ServerFarm"] = "ServerFarm";
    KnownResourceScopeType["Subscription"] = "Subscription";
    KnownResourceScopeType["WebSite"] = "WebSite";
})(KnownResourceScopeType || (KnownResourceScopeType = {}));
/** Known values of {@link CheckNameResourceTypes} that the service accepts. */
export var KnownCheckNameResourceTypes;
(function (KnownCheckNameResourceTypes) {
    KnownCheckNameResourceTypes["Site"] = "Site";
    KnownCheckNameResourceTypes["Slot"] = "Slot";
    KnownCheckNameResourceTypes["HostingEnvironment"] = "HostingEnvironment";
    KnownCheckNameResourceTypes["PublishingUser"] = "PublishingUser";
    KnownCheckNameResourceTypes["MicrosoftWebSites"] = "Microsoft.Web/sites";
    KnownCheckNameResourceTypes["MicrosoftWebSitesSlots"] = "Microsoft.Web/sites/slots";
    KnownCheckNameResourceTypes["MicrosoftWebHostingEnvironments"] = "Microsoft.Web/hostingEnvironments";
    KnownCheckNameResourceTypes["MicrosoftWebPublishingUsers"] = "Microsoft.Web/publishingUsers";
})(KnownCheckNameResourceTypes || (KnownCheckNameResourceTypes = {}));
/** Known values of {@link InAvailabilityReasonType} that the service accepts. */
export var KnownInAvailabilityReasonType;
(function (KnownInAvailabilityReasonType) {
    KnownInAvailabilityReasonType["Invalid"] = "Invalid";
    KnownInAvailabilityReasonType["AlreadyExists"] = "AlreadyExists";
})(KnownInAvailabilityReasonType || (KnownInAvailabilityReasonType = {}));
/** Known values of {@link SkuName} that the service accepts. */
export var KnownSkuName;
(function (KnownSkuName) {
    KnownSkuName["Free"] = "Free";
    KnownSkuName["Shared"] = "Shared";
    KnownSkuName["Basic"] = "Basic";
    KnownSkuName["Standard"] = "Standard";
    KnownSkuName["Premium"] = "Premium";
    KnownSkuName["Dynamic"] = "Dynamic";
    KnownSkuName["Isolated"] = "Isolated";
    KnownSkuName["PremiumV2"] = "PremiumV2";
    KnownSkuName["ElasticPremium"] = "ElasticPremium";
    KnownSkuName["ElasticIsolated"] = "ElasticIsolated";
})(KnownSkuName || (KnownSkuName = {}));
/** Known values of {@link ValidateResourceTypes} that the service accepts. */
export var KnownValidateResourceTypes;
(function (KnownValidateResourceTypes) {
    KnownValidateResourceTypes["ServerFarm"] = "ServerFarm";
    KnownValidateResourceTypes["Site"] = "Site";
})(KnownValidateResourceTypes || (KnownValidateResourceTypes = {}));
/** Known values of {@link ScmType} that the service accepts. */
export var KnownScmType;
(function (KnownScmType) {
    KnownScmType["None"] = "None";
    KnownScmType["Dropbox"] = "Dropbox";
    KnownScmType["Tfs"] = "Tfs";
    KnownScmType["LocalGit"] = "LocalGit";
    KnownScmType["GitHub"] = "GitHub";
    KnownScmType["CodePlexGit"] = "CodePlexGit";
    KnownScmType["CodePlexHg"] = "CodePlexHg";
    KnownScmType["BitbucketGit"] = "BitbucketGit";
    KnownScmType["BitbucketHg"] = "BitbucketHg";
    KnownScmType["ExternalGit"] = "ExternalGit";
    KnownScmType["ExternalHg"] = "ExternalHg";
    KnownScmType["OneDrive"] = "OneDrive";
    KnownScmType["VSO"] = "VSO";
    KnownScmType["Vstsrm"] = "VSTSRM";
})(KnownScmType || (KnownScmType = {}));
/** Known values of {@link SupportedTlsVersions} that the service accepts. */
export var KnownSupportedTlsVersions;
(function (KnownSupportedTlsVersions) {
    KnownSupportedTlsVersions["One0"] = "1.0";
    KnownSupportedTlsVersions["One1"] = "1.1";
    KnownSupportedTlsVersions["One2"] = "1.2";
})(KnownSupportedTlsVersions || (KnownSupportedTlsVersions = {}));
/** Known values of {@link FtpsState} that the service accepts. */
export var KnownFtpsState;
(function (KnownFtpsState) {
    KnownFtpsState["AllAllowed"] = "AllAllowed";
    KnownFtpsState["FtpsOnly"] = "FtpsOnly";
    KnownFtpsState["Disabled"] = "Disabled";
})(KnownFtpsState || (KnownFtpsState = {}));
/** Known values of {@link DatabaseType} that the service accepts. */
export var KnownDatabaseType;
(function (KnownDatabaseType) {
    KnownDatabaseType["SqlAzure"] = "SqlAzure";
    KnownDatabaseType["MySql"] = "MySql";
    KnownDatabaseType["LocalMySql"] = "LocalMySql";
    KnownDatabaseType["PostgreSql"] = "PostgreSql";
})(KnownDatabaseType || (KnownDatabaseType = {}));
/** Known values of {@link RouteType} that the service accepts. */
export var KnownRouteType;
(function (KnownRouteType) {
    KnownRouteType["Default"] = "DEFAULT";
    KnownRouteType["Inherited"] = "INHERITED";
    KnownRouteType["Static"] = "STATIC";
})(KnownRouteType || (KnownRouteType = {}));
/** Known values of {@link PublishingProfileFormat} that the service accepts. */
export var KnownPublishingProfileFormat;
(function (KnownPublishingProfileFormat) {
    KnownPublishingProfileFormat["FileZilla3"] = "FileZilla3";
    KnownPublishingProfileFormat["WebDeploy"] = "WebDeploy";
    KnownPublishingProfileFormat["Ftp"] = "Ftp";
})(KnownPublishingProfileFormat || (KnownPublishingProfileFormat = {}));
/** Known values of {@link BuildStatus} that the service accepts. */
export var KnownBuildStatus;
(function (KnownBuildStatus) {
    KnownBuildStatus["WaitingForDeployment"] = "WaitingForDeployment";
    KnownBuildStatus["Uploading"] = "Uploading";
    KnownBuildStatus["Deploying"] = "Deploying";
    KnownBuildStatus["Ready"] = "Ready";
    KnownBuildStatus["Failed"] = "Failed";
    KnownBuildStatus["Deleting"] = "Deleting";
    KnownBuildStatus["Detached"] = "Detached";
})(KnownBuildStatus || (KnownBuildStatus = {}));
/** Known values of {@link TriggerTypes} that the service accepts. */
export var KnownTriggerTypes;
(function (KnownTriggerTypes) {
    KnownTriggerTypes["HttpTrigger"] = "HttpTrigger";
    KnownTriggerTypes["Unknown"] = "Unknown";
})(KnownTriggerTypes || (KnownTriggerTypes = {}));
//# sourceMappingURL=index.js.map