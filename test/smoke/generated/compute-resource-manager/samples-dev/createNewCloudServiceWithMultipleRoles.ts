/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 *
 * @summary Create or update a cloud service. Please note some properties can be set only during cloud service creation.
 */
import {
  CloudService,
  ComputeManagementClient
} from "@msinternal/compute-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: ComputeManagementClient;
//cloudServices.beginCreateOrUpdateAndWait
async function createNewCloudServiceWithMultipleRoles() {
  const resourceGroupName = "ConstosoRG";
  const cloudServiceName = "{cs-name}";
  const parameters: CloudService = {
    location: "westus",
    properties: {
      configuration: "{ServiceConfiguration}",
      networkProfile: {
        loadBalancerConfigurations: [
          {
            name: "contosolb",
            properties: {
              frontendIPConfigurations: [
                {
                  name: "contosofe",
                  properties: {
                    publicIPAddress: {
                      id:
                        "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      packageUrl: "{PackageUrl}",
      roleProfile: {
        roles: [
          {
            name: "ContosoFrontend",
            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
          },
          {
            name: "ContosoBackend",
            sku: { name: "Standard_D1_v2", capacity: 1, tier: "Standard" }
          }
        ]
      },
      upgradeMode: "Auto"
    }
  };
  const options = { parameters: parameters };
  await client.cloudServices
    .beginCreateOrUpdateAndWait(resourceGroupName, cloudServiceName, options)
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "{subscription-id}";
  client = new ComputeManagementClient(credential, subscriptionId);
  await createNewCloudServiceWithMultipleRoles();
}
main();
