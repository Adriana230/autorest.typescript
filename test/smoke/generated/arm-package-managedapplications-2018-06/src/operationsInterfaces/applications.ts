/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Application,
  ApplicationsListByResourceGroupNextOptionalParams,
  ApplicationsListByResourceGroupOptionalParams,
  ApplicationsListBySubscriptionNextOptionalParams,
  ApplicationsListBySubscriptionOptionalParams,
  ApplicationsListByResourceGroupNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams,
  ApplicationsGetOptionalParams,
  ApplicationsGetResponse,
  ApplicationsDeleteOptionalParams,
  ApplicationsCreateOrUpdateOptionalParams,
  ApplicationsCreateOrUpdateResponse,
  ApplicationsUpdateOptionalParams,
  ApplicationsUpdateResponse,
  ApplicationsGetByIdOptionalParams,
  ApplicationsGetByIdResponse,
  ApplicationsDeleteByIdOptionalParams,
  ApplicationsCreateOrUpdateByIdOptionalParams,
  ApplicationsCreateOrUpdateByIdResponse,
  ApplicationsUpdateByIdOptionalParams,
  ApplicationsUpdateByIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Applications. */
export interface Applications {
  /**
   * Gets all the applications within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ApplicationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * Gets all the applications within a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ApplicationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNext method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNext
   *                 method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNext method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * ListBySubscriptionNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  listBySubscriptionNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * Gets the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsGetOptionalParams
  ): Promise<ApplicationsGetResponse>;
  /**
   * Deletes the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Creates a new managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    applicationName: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationsCreateOrUpdateResponse>,
      ApplicationsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a new managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    applicationName: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateOptionalParams
  ): Promise<ApplicationsCreateOrUpdateResponse>;
  /**
   * Updates an existing managed application. The only value that can be updated via PATCH currently is
   * the tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsUpdateOptionalParams
  ): Promise<ApplicationsUpdateResponse>;
  /**
   * Gets the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  getById(
    applicationId: string,
    options?: ApplicationsGetByIdOptionalParams
  ): Promise<ApplicationsGetByIdResponse>;
  /**
   * Deletes the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  beginDeleteById(
    applicationId: string,
    options?: ApplicationsDeleteByIdOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  beginDeleteByIdAndWait(
    applicationId: string,
    options?: ApplicationsDeleteByIdOptionalParams
  ): Promise<void>;
  /**
   * Creates a new managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  beginCreateOrUpdateById(
    applicationId: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateByIdOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationsCreateOrUpdateByIdResponse>,
      ApplicationsCreateOrUpdateByIdResponse
    >
  >;
  /**
   * Creates a new managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  beginCreateOrUpdateByIdAndWait(
    applicationId: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateByIdOptionalParams
  ): Promise<ApplicationsCreateOrUpdateByIdResponse>;
  /**
   * Updates an existing managed application. The only value that can be updated via PATCH currently is
   * the tags.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  updateById(
    applicationId: string,
    options?: ApplicationsUpdateByIdOptionalParams
  ): Promise<ApplicationsUpdateByIdResponse>;
}
