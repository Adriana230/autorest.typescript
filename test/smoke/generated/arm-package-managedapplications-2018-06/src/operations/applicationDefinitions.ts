/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ApplicationDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationClient } from "../applicationClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ApplicationDefinition,
  ApplicationDefinitionsListByResourceGroupNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextOptionalParams,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams,
  ApplicationDefinitionsGetOptionalParams,
  ApplicationDefinitionsGetResponse,
  ApplicationDefinitionsDeleteOptionalParams,
  ApplicationDefinitionsCreateOrUpdateOptionalParams,
  ApplicationDefinitionsCreateOrUpdateResponse,
  ApplicationDefinitionsListByResourceGroupResponse,
  ApplicationDefinitionsGetByIdOptionalParams,
  ApplicationDefinitionsGetByIdResponse,
  ApplicationDefinitionsDeleteByIdOptionalParams,
  ApplicationDefinitionsCreateOrUpdateByIdOptionalParams,
  ApplicationDefinitionsCreateOrUpdateByIdResponse,
  ApplicationDefinitionsListByResourceGroupNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextResponse,
  ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationDefinitions operations. */
export class ApplicationDefinitionsImpl implements ApplicationDefinitions {
  private readonly client: ApplicationClient;

  /**
   * Initialize a new instance of the class ApplicationDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationClient) {
    this.client = client;
  }

  /**
   * Lists the managed application definitions in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ApplicationDefinitionsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ApplicationDefinitionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ApplicationDefinitionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  public listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<ApplicationDefinition> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<ApplicationDefinition> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsGetOptionalParams
  ): Promise<ApplicationDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, applicationDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition to delete.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationDefinitionName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition to delete.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      applicationDefinitionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates a new managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param parameters Parameters supplied to the create or update an managed application definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    applicationDefinitionName: string,
    parameters: ApplicationDefinition,
    options?: ApplicationDefinitionsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationDefinitionsCreateOrUpdateResponse>,
      ApplicationDefinitionsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ApplicationDefinitionsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationDefinitionName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates a new managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param parameters Parameters supplied to the create or update an managed application definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    applicationDefinitionName: string,
    parameters: ApplicationDefinition,
    options?: ApplicationDefinitionsCreateOrUpdateOptionalParams
  ): Promise<ApplicationDefinitionsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      applicationDefinitionName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the managed application definitions in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ApplicationDefinitionsListByResourceGroupOptionalParams
  ): Promise<ApplicationDefinitionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param options The options parameters.
   */
  getById(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsGetByIdOptionalParams
  ): Promise<ApplicationDefinitionsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, applicationDefinitionName, options },
      getByIdOperationSpec
    );
  }

  /**
   * Deletes the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param options The options parameters.
   */
  async beginDeleteById(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsDeleteByIdOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationDefinitionName, options },
      deleteByIdOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes the managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param options The options parameters.
   */
  async beginDeleteByIdAndWait(
    resourceGroupName: string,
    applicationDefinitionName: string,
    options?: ApplicationDefinitionsDeleteByIdOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteById(
      resourceGroupName,
      applicationDefinitionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates a new managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param parameters Parameters supplied to the create or update a managed application definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateById(
    resourceGroupName: string,
    applicationDefinitionName: string,
    parameters: ApplicationDefinition,
    options?: ApplicationDefinitionsCreateOrUpdateByIdOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationDefinitionsCreateOrUpdateByIdResponse>,
      ApplicationDefinitionsCreateOrUpdateByIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ApplicationDefinitionsCreateOrUpdateByIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationDefinitionName, parameters, options },
      createOrUpdateByIdOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates a new managed application definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationDefinitionName The name of the managed application definition.
   * @param parameters Parameters supplied to the create or update a managed application definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateByIdAndWait(
    resourceGroupName: string,
    applicationDefinitionName: string,
    parameters: ApplicationDefinition,
    options?: ApplicationDefinitionsCreateOrUpdateByIdOptionalParams
  ): Promise<ApplicationDefinitionsCreateOrUpdateByIdResponse> {
    const poller = await this.beginCreateOrUpdateById(
      resourceGroupName,
      applicationDefinitionName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextOptionalParams
  ): Promise<ApplicationDefinitionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextOptionalParams
  ): Promise<ApplicationDefinitionsListByResourceGroupNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextOptionalParams
  ): Promise<ApplicationDefinitionsListByResourceGroupNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextOptionalParams
  ): Promise<
    ApplicationDefinitionsListByResourceGroupNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationDefinitionsListByResourceGroupNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationDefinitionsListByResourceGroupNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    201: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    202: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    204: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    201: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    202: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    204: {
      bodyMapper: Mappers.ApplicationDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.applicationDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
