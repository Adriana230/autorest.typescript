/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Applications } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationClient } from "../applicationClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Application,
  ApplicationsListByResourceGroupNextOptionalParams,
  ApplicationsListByResourceGroupOptionalParams,
  ApplicationsListBySubscriptionNextOptionalParams,
  ApplicationsListBySubscriptionOptionalParams,
  ApplicationsListByResourceGroupNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams,
  ApplicationsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams,
  ApplicationsListBySubscriptionNextNextNextNextNextNextNextNextOptionalParams,
  ApplicationsGetOptionalParams,
  ApplicationsGetResponse,
  ApplicationsDeleteOptionalParams,
  ApplicationsCreateOrUpdateOptionalParams,
  ApplicationsCreateOrUpdateResponse,
  ApplicationsUpdateOptionalParams,
  ApplicationsUpdateResponse,
  ApplicationsListByResourceGroupResponse,
  ApplicationsListBySubscriptionResponse,
  ApplicationsGetByIdOptionalParams,
  ApplicationsGetByIdResponse,
  ApplicationsDeleteByIdOptionalParams,
  ApplicationsCreateOrUpdateByIdOptionalParams,
  ApplicationsCreateOrUpdateByIdResponse,
  ApplicationsUpdateByIdOptionalParams,
  ApplicationsUpdateByIdResponse,
  ApplicationsListByResourceGroupNextResponse,
  ApplicationsListBySubscriptionNextResponse,
  ApplicationsListByResourceGroupNextNextResponse,
  ApplicationsListBySubscriptionNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextNextNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextNextNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextNextNextNextNextResponse,
  ApplicationsListByResourceGroupNextNextNextNextNextNextNextNextResponse,
  ApplicationsListBySubscriptionNextNextNextNextNextNextNextNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Applications operations. */
export class ApplicationsImpl implements Applications {
  private readonly client: ApplicationClient;

  /**
   * Initialize a new instance of the class Applications class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationClient) {
    this.client = client;
  }

  /**
   * Gets all the applications within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ApplicationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ApplicationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ApplicationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all the applications within a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ApplicationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ApplicationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ApplicationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  public listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  public listBySubscriptionNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBySubscriptionNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNext method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBySubscriptionNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextNextPagingPage(nextLink, options);
      }
    };
  }

  private async *listBySubscriptionNextNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNextNext(nextLink, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBySubscriptionNextNextNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBySubscriptionNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBySubscriptionNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listByResourceGroupNextNextNextNextNextNextNextPagingAll(
      resourceGroupName,
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
          resourceGroupName,
          nextLink,
          options
        );
      }
    };
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingPage(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listByResourceGroupNextNextNextNextNextNextNext(
      resourceGroupName,
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNextNextNextNextNextNextNextNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupNextNextNextNextNextNextNextPagingAll(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listByResourceGroupNextNextNextNextNextNextNextPagingPage(
      resourceGroupName,
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * ListBySubscriptionNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  public listBySubscriptionNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams
  ): PagedAsyncIterableIterator<Application> {
    const iter = this.listBySubscriptionNextNextNextNextNextNextNextPagingAll(
      nextLink,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionNextNextNextNextNextNextNextPagingPage(
          nextLink,
          options
        );
      }
    };
  }

  private async *listBySubscriptionNextNextNextNextNextNextNextPagingPage(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application[]> {
    let result = await this._listBySubscriptionNextNextNextNextNextNextNext(
      nextLink,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNextNextNextNextNextNextNextNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionNextNextNextNextNextNextNextPagingAll(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams
  ): AsyncIterableIterator<Application> {
    for await (const page of this.listBySubscriptionNextNextNextNextNextNextNextPagingPage(
      nextLink,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsGetOptionalParams
  ): Promise<ApplicationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, applicationName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes the managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      applicationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates a new managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    applicationName: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationsCreateOrUpdateResponse>,
      ApplicationsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ApplicationsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, applicationName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates a new managed application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    applicationName: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateOptionalParams
  ): Promise<ApplicationsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      applicationName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing managed application. The only value that can be updated via PATCH currently is
   * the tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationName The name of the managed application.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    applicationName: string,
    options?: ApplicationsUpdateOptionalParams
  ): Promise<ApplicationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, applicationName, options },
      updateOperationSpec
    );
  }

  /**
   * Gets all the applications within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ApplicationsListByResourceGroupOptionalParams
  ): Promise<ApplicationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets all the applications within a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ApplicationsListBySubscriptionOptionalParams
  ): Promise<ApplicationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  getById(
    applicationId: string,
    options?: ApplicationsGetByIdOptionalParams
  ): Promise<ApplicationsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { applicationId, options },
      getByIdOperationSpec
    );
  }

  /**
   * Deletes the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  async beginDeleteById(
    applicationId: string,
    options?: ApplicationsDeleteByIdOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { applicationId, options },
      deleteByIdOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes the managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  async beginDeleteByIdAndWait(
    applicationId: string,
    options?: ApplicationsDeleteByIdOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteById(applicationId, options);
    return poller.pollUntilDone();
  }

  /**
   * Creates a new managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateById(
    applicationId: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateByIdOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ApplicationsCreateOrUpdateByIdResponse>,
      ApplicationsCreateOrUpdateByIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ApplicationsCreateOrUpdateByIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { applicationId, parameters, options },
      createOrUpdateByIdOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates a new managed application.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param parameters Parameters supplied to the create or update a managed application.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateByIdAndWait(
    applicationId: string,
    parameters: Application,
    options?: ApplicationsCreateOrUpdateByIdOptionalParams
  ): Promise<ApplicationsCreateOrUpdateByIdResponse> {
    const poller = await this.beginCreateOrUpdateById(
      applicationId,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing managed application. The only value that can be updated via PATCH currently is
   * the tags.
   * @param applicationId The fully qualified ID of the managed application, including the managed
   *                      application name and the managed application resource type. Use the format,
   *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
   * @param options The options parameters.
   */
  updateById(
    applicationId: string,
    options?: ApplicationsUpdateByIdOptionalParams
  ): Promise<ApplicationsUpdateByIdResponse> {
    return this.client.sendOperationRequest(
      { applicationId, options },
      updateByIdOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNext method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroupNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionNextNextNext
   *                 method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextOptionalParams
  ): Promise<ApplicationsListByResourceGroupNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextOptionalParams
  ): Promise<ApplicationsListBySubscriptionNextNextNextNextNextNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationsListByResourceGroupNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationsListBySubscriptionNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNextNextNextNextNextNextNextNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByResourceGroupNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNextNextNextNextNextNextNextNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ApplicationsListByResourceGroupNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationsListByResourceGroupNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNextNextNextNextNextNextNextNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionNextNextNextNextNextNextNext method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNextNextNextNextNextNextNextNext(
    nextLink: string,
    options?: ApplicationsListBySubscriptionNextNextNextNextNextNextNextNextOptionalParams
  ): Promise<
    ApplicationsListBySubscriptionNextNextNextNextNextNextNextNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextNextNextNextNextNextNextNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    201: {
      bodyMapper: Mappers.Application
    },
    202: {
      bodyMapper: Mappers.Application
    },
    204: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{applicationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.applicationId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{applicationId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.applicationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{applicationId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    201: {
      bodyMapper: Mappers.Application
    },
    202: {
      bodyMapper: Mappers.Application
    },
    204: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.applicationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{applicationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.applicationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextNextNextNextNextNextNextNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
