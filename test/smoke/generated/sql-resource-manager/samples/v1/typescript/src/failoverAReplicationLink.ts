/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Sets which replica database is primary by failing over from the current primary replica database. This operation might result in data loss.
 *
 * @summary Sets which replica database is primary by failing over from the current primary replica database. This operation might result in data loss.
 */
import { SqlManagementClient } from "@msinternal/sql-resource-manager";
import { DefaultAzureCredential } from "@azure/identity";

let client: SqlManagementClient;
//replicationLinks.beginFailoverAllowDataLossAndWait
async function failoverAReplicationLink() {
  const resourceGroupName = "sqlcrudtest-8931";
  const serverName = "sqlcrudtest-2137";
  const databaseName = "testdb";
  const linkId = "f0550bf5-07ce-4270-8e4b-71737975973a";
  await client.replicationLinks
    .beginFailoverAllowDataLossAndWait(
      resourceGroupName,
      serverName,
      databaseName,
      linkId
    )
    .then((res) => {
      console.log(res);
    });
}
async function main() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-1111-2222-3333-444444444444";
  client = new SqlManagementClient(credential, subscriptionId);
  await failoverAReplicationLink();
}
main();
