/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2014-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serverName: coreHttp.OperationURLParameter = {
  parameterPath: "serverName",
  mapper: {
    serializedName: "serverName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const databaseName: coreHttp.OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const restorableDroppededDatabaseId: coreHttp.OperationURLParameter = {
  parameterPath: "restorableDroppededDatabaseId",
  mapper: {
    serializedName: "restorableDroppededDatabaseId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerConnectionPolicy
};

export const connectionPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "connectionPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "connectionPolicyName",
    type: {
      name: "String"
    }
  }
};

export const securityAlertPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "securityAlertPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseSecurityAlertPolicy
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataMaskingPolicy
};

export const dataMaskingPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "dataMaskingPolicyName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "dataMaskingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataMaskingRule
};

export const dataMaskingRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "dataMaskingRuleName",
  mapper: {
    serializedName: "dataMaskingRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FirewallRule
};

export const firewallRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "firewallRuleName",
  mapper: {
    serializedName: "firewallRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GeoBackupPolicy
};

export const geoBackupPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "geoBackupPolicyName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "geoBackupPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ImportRequest
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ImportExtensionRequest
};

export const extensionName: coreHttp.OperationURLParameter = {
  parameterPath: "extensionName",
  mapper: {
    defaultValue: "import",
    isConstant: true,
    serializedName: "extensionName",
    type: {
      name: "String"
    }
  }
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExportRequest
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-10-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Database
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseUpdate
};

export const elasticPoolName: coreHttp.OperationURLParameter = {
  parameterPath: "elasticPoolName",
  mapper: {
    serializedName: "elasticPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ResourceMoveDefinition
};

export const replicaType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "replicaType"],
  mapper: {
    serializedName: "replicaType",
    type: {
      name: "String"
    }
  }
};

export const apiVersion2: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-06-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ElasticPool
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ElasticPoolUpdate
};

export const recommendedElasticPoolName: coreHttp.OperationURLParameter = {
  parameterPath: "recommendedElasticPoolName",
  mapper: {
    serializedName: "recommendedElasticPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const linkId: coreHttp.OperationURLParameter = {
  parameterPath: "linkId",
  mapper: {
    serializedName: "linkId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UnlinkParameters
};

export const communicationLinkName: coreHttp.OperationURLParameter = {
  parameterPath: "communicationLinkName",
  mapper: {
    serializedName: "communicationLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerCommunicationLink
};

export const serviceObjectiveName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceObjectiveName",
  mapper: {
    serializedName: "serviceObjectiveName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceTierAdvisorName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceTierAdvisorName",
  mapper: {
    serializedName: "serviceTierAdvisorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TransparentDataEncryption
};

export const transparentDataEncryptionName: coreHttp.OperationURLParameter = {
  parameterPath: "transparentDataEncryptionName",
  mapper: {
    defaultValue: "current",
    isConstant: true,
    serializedName: "transparentDataEncryptionName",
    type: {
      name: "String"
    }
  }
};

export const apiVersion3: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2015-05-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseAutomaticTuning
};

export const encryptionProtectorName: coreHttp.OperationURLParameter = {
  parameterPath: "encryptionProtectorName",
  mapper: {
    defaultValue: "current",
    isConstant: true,
    serializedName: "encryptionProtectorName",
    type: {
      name: "String"
    }
  }
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EncryptionProtector
};

export const failoverGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "failoverGroupName",
  mapper: {
    serializedName: "failoverGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FailoverGroup
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.FailoverGroupUpdate
};

export const keyName: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "keyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerKey
};

export const syncAgentName: coreHttp.OperationURLParameter = {
  parameterPath: "syncAgentName",
  mapper: {
    serializedName: "syncAgentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SyncAgent
};

export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const syncGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "syncGroupName",
  mapper: {
    serializedName: "syncGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const startTime: coreHttp.OperationQueryParameter = {
  parameterPath: "startTime",
  mapper: {
    serializedName: "startTime",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endTime: coreHttp.OperationQueryParameter = {
  parameterPath: "endTime",
  mapper: {
    serializedName: "endTime",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const typeParam: coreHttp.OperationQueryParameter = {
  parameterPath: "typeParam",
  mapper: {
    serializedName: "type",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const continuationToken: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String"
    }
  }
};

export const parameters23: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SyncGroup
};

export const syncMemberName: coreHttp.OperationURLParameter = {
  parameterPath: "syncMemberName",
  mapper: {
    serializedName: "syncMemberName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters24: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SyncMember
};

export const usageName: coreHttp.OperationURLParameter = {
  parameterPath: "usageName",
  mapper: {
    serializedName: "usageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualClusterName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualClusterName",
  mapper: {
    serializedName: "virtualClusterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters25: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualClusterUpdate
};

export const virtualNetworkRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkRuleName",
  mapper: {
    serializedName: "virtualNetworkRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters26: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.VirtualNetworkRule
};

export const blobAuditingPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "blobAuditingPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "blobAuditingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const apiVersion4: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-03-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters27: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
};

export const parameters28: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ExtendedServerBlobAuditingPolicy
};

export const parameters29: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerBlobAuditingPolicy
};

export const parameters30: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseBlobAuditingPolicy
};

export const vulnerabilityAssessmentName: coreHttp.OperationURLParameter = {
  parameterPath: "vulnerabilityAssessmentName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "vulnerabilityAssessmentName",
    type: {
      name: "String"
    }
  }
};

export const ruleId: coreHttp.OperationURLParameter = {
  parameterPath: "ruleId",
  mapper: {
    serializedName: "ruleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const baselineName: coreHttp.OperationURLParameter = {
  parameterPath: "baselineName",
  mapper: {
    serializedName: "baselineName",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["master", "default"]
    }
  }
};

export const parameters31: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseVulnerabilityAssessmentRuleBaseline
};

export const parameters32: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabaseVulnerabilityAssessment
};

export const jobAgentName: coreHttp.OperationURLParameter = {
  parameterPath: "jobAgentName",
  mapper: {
    serializedName: "jobAgentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters33: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.JobAgent
};

export const parameters34: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.JobAgentUpdate
};

export const credentialName: coreHttp.OperationURLParameter = {
  parameterPath: "credentialName",
  mapper: {
    serializedName: "credentialName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters35: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.JobCredential
};

export const createTimeMin: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "createTimeMin"],
  mapper: {
    serializedName: "createTimeMin",
    type: {
      name: "DateTime"
    }
  }
};

export const createTimeMax: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "createTimeMax"],
  mapper: {
    serializedName: "createTimeMax",
    type: {
      name: "DateTime"
    }
  }
};

export const endTimeMin: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "endTimeMin"],
  mapper: {
    serializedName: "endTimeMin",
    type: {
      name: "DateTime"
    }
  }
};

export const endTimeMax: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "endTimeMax"],
  mapper: {
    serializedName: "endTimeMax",
    type: {
      name: "DateTime"
    }
  }
};

export const isActive: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "isActive"],
  mapper: {
    serializedName: "isActive",
    type: {
      name: "Boolean"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const jobName: coreHttp.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobExecutionId: coreHttp.OperationURLParameter = {
  parameterPath: "jobExecutionId",
  mapper: {
    serializedName: "jobExecutionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const parameters36: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Job
};

export const stepName: coreHttp.OperationURLParameter = {
  parameterPath: "stepName",
  mapper: {
    serializedName: "stepName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobVersion: coreHttp.OperationURLParameter = {
  parameterPath: "jobVersion",
  mapper: {
    serializedName: "jobVersion",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const parameters37: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.JobStep
};

export const targetId: coreHttp.OperationURLParameter = {
  parameterPath: "targetId",
  mapper: {
    serializedName: "targetId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const targetGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "targetGroupName",
  mapper: {
    serializedName: "targetGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters38: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.JobTargetGroup
};

export const longTermRetentionServerName: coreHttp.OperationURLParameter = {
  parameterPath: "longTermRetentionServerName",
  mapper: {
    serializedName: "longTermRetentionServerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const longTermRetentionDatabaseName: coreHttp.OperationURLParameter = {
  parameterPath: "longTermRetentionDatabaseName",
  mapper: {
    serializedName: "longTermRetentionDatabaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const backupName: coreHttp.OperationURLParameter = {
  parameterPath: "backupName",
  mapper: {
    serializedName: "backupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const onlyLatestPerDatabase: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "onlyLatestPerDatabase"],
  mapper: {
    serializedName: "onlyLatestPerDatabase",
    type: {
      name: "Boolean"
    }
  }
};

export const databaseState: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "databaseState"],
  mapper: {
    serializedName: "databaseState",
    type: {
      name: "String"
    }
  }
};

export const policyName: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "policyName",
    type: {
      name: "String"
    }
  }
};

export const parameters39: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackupLongTermRetentionPolicy
};

export const managedInstanceName: coreHttp.OperationURLParameter = {
  parameterPath: "managedInstanceName",
  mapper: {
    serializedName: "managedInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters40: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedBackupShortTermRetentionPolicy
};

export const restorableDroppedDatabaseId: coreHttp.OperationURLParameter = {
  parameterPath: "restorableDroppedDatabaseId",
  mapper: {
    serializedName: "restorableDroppedDatabaseId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters41: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerAutomaticTuning
};

export const dnsAliasName: coreHttp.OperationURLParameter = {
  parameterPath: "dnsAliasName",
  mapper: {
    serializedName: "dnsAliasName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters42: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerDnsAliasAcquisition
};

export const securityAlertPolicyName1: coreHttp.OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "securityAlertPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters43: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerSecurityAlertPolicy
};

export const parameters44: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CreateDatabaseRestorePointDefinition
};

export const restorePointName: coreHttp.OperationURLParameter = {
  parameterPath: "restorePointName",
  mapper: {
    serializedName: "restorePointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters45: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedDatabaseSecurityAlertPolicy
};

export const parameters46: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedServerSecurityAlertPolicy
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const includeDisabledRecommendations: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includeDisabledRecommendations"],
  mapper: {
    serializedName: "includeDisabledRecommendations",
    type: {
      name: "Boolean"
    }
  }
};

export const skipToken: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const schemaName: coreHttp.OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tableName: coreHttp.OperationURLParameter = {
  parameterPath: "tableName",
  mapper: {
    serializedName: "tableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const columnName: coreHttp.OperationURLParameter = {
  parameterPath: "columnName",
  mapper: {
    serializedName: "columnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource: coreHttp.OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "recommended",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource1: coreHttp.OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    serializedName: "sensitivityLabelSource",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["current", "recommended"]
    }
  }
};

export const parameters47: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SensitivityLabel
};

export const sensitivityLabelSource2: coreHttp.OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "current",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const administratorName: coreHttp.OperationURLParameter = {
  parameterPath: "administratorName",
  mapper: {
    defaultValue: "ActiveDirectory",
    isConstant: true,
    serializedName: "administratorName",
    type: {
      name: "String"
    }
  }
};

export const parameters48: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceAdministrator
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const scanId: coreHttp.OperationURLParameter = {
  parameterPath: "scanId",
  mapper: {
    serializedName: "scanId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters49: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.InstanceFailoverGroup
};

export const parameters50: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BackupShortTermRetentionPolicy
};

export const parameters51: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.TdeCertificate
};

export const parameters52: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceKey
};

export const parameters53: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceEncryptionProtector
};

export const recoverableDatabaseName: coreHttp.OperationURLParameter = {
  parameterPath: "recoverableDatabaseName",
  mapper: {
    serializedName: "recoverableDatabaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters54: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceVulnerabilityAssessment
};

export const parameters55: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerVulnerabilityAssessment
};

export const instancePoolName: coreHttp.OperationURLParameter = {
  parameterPath: "instancePoolName",
  mapper: {
    serializedName: "instancePoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters56: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.InstancePool
};

export const parameters57: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.InstancePoolUpdate
};

export const expandChildren: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expandChildren"],
  mapper: {
    serializedName: "expandChildren",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters58: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstance
};

export const parameters59: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceUpdate
};

export const privateEndpointConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters60: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PrivateEndpointConnection
};

export const groupName: coreHttp.OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion5: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-06-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters61: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Server
};

export const parameters62: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerUpdate
};

export const parameters63: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CheckNameAvailabilityRequest
};

export const include: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    type: {
      name: "String"
    }
  }
};

export const databaseState1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "databaseState"],
  mapper: {
    serializedName: "databaseState",
    type: {
      name: "String"
    }
  }
};

export const parameters64: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedInstanceLongTermRetentionPolicy
};

export const workloadGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "workloadGroupName",
  mapper: {
    serializedName: "workloadGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters65: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.WorkloadGroup
};

export const workloadClassifierName: coreHttp.OperationURLParameter = {
  parameterPath: "workloadClassifierName",
  mapper: {
    serializedName: "workloadClassifierName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters66: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.WorkloadClassifier
};

export const restoreDetailsName: coreHttp.OperationURLParameter = {
  parameterPath: "restoreDetailsName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "restoreDetailsName",
    type: {
      name: "String"
    }
  }
};

export const parameters67: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedDatabase
};

export const parameters68: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ManagedDatabaseUpdate
};

export const parameters69: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CompleteDatabaseRestoreDefinition
};

export const parameters70: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ServerAzureADAdministrator
};
