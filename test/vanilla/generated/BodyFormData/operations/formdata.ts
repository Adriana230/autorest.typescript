/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/formdataMappers";
import { AutoRestSwaggerBATFormDataServiceContext } from "../autoRestSwaggerBATFormDataServiceContext";

/** Class representing a Formdata. */
export class Formdata {
  private readonly client: AutoRestSwaggerBATFormDataServiceContext;
  private readonly serializer = new msRest.Serializer(Mappers);
  /**
   * Create a Formdata.
   * @param {AutoRestSwaggerBATFormDataServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATFormDataServiceContext) {
    this.client = client;
  }

  /**
   * Upload file
   *
   * @param {msRest.HttpRequestBody} fileContent File to upload.
   *
   * @param {string} fileName File name to upload. Name has to be spelled exactly as written here.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async uploadFileWithHttpOperationResponse(fileContent: msRest.HttpRequestBody, fileName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            fileContent,
            fileName
          },
          options),
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "formdata/stream/uploadfile",
          formDataParameters: [
            {
              parameterPath: "fileContent",
              mapper: {
                required: true,
                serializedName: "fileContent",
                type: {
                  name: "Stream"
                }
              }
            },
            {
              parameterPath: "fileName",
              mapper: {
                required: true,
                serializedName: "fileName",
                type: {
                  name: "String"
                }
              }
            }
          ],
          contentType: "multipart/form-data",
          responses: {
            200: {
              bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                  name: "Stream"
                }
              }
            },
            default: {
              bodyMapper: Mappers.ErrorModel
            }
          },
          serializer: this.serializer
        });
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Upload file
   *
   * @param {msRest.HttpRequestBody} fileContent File to upload.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async uploadFileViaBodyWithHttpOperationResponse(fileContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            fileContent
          },
          options),
        {
          httpMethod: "PUT",
          baseUrl: this.client.baseUri,
          path: "formdata/stream/uploadfile",
          requestBody: {
            parameterPath: "fileContent",
            mapper: {
              required: true,
              serializedName: "fileContent",
              type: {
                name: "Stream"
              }
            }
          },
          contentType: "application/octet-stream",
          responses: {
            200: {
              bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                  name: "Stream"
                }
              }
            },
            default: {
              bodyMapper: Mappers.ErrorModel
            }
          },
          serializer: this.serializer
        });
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

}
