"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Mappers = require("../models/mappers");
const WebResource = msRest.WebResource;
/** Class representing a PathItems. */
class PathItems {
    /**
     * Create a PathItems.
     * @param {AutoRestUrlTestService} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
     * globalStringQuery='globalStringQuery',
     * pathItemStringQuery='pathItemStringQuery',
     * localStringQuery='localStringQuery'
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     *
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     *
     * @param {PathItemsGetAllWithValuesOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
            let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
            // Validate
            try {
                if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
                    throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
                }
                if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
                    throw new Error('localStringQuery must be of type string.');
                }
                if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
                    throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
                }
                if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
                    throw new Error('pathItemStringQuery must be of type string.');
                }
                if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringQuery must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery';
            requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
            requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
            requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
            let queryParamsArray = [];
            if (localStringQuery !== null && localStringQuery !== undefined) {
                queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
            }
            if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
                queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
            }
            if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
                queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            httpRequest.body = null;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.pipeline(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorModel;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
     * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
     * localStringQuery='localStringQuery'
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     *
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     *
     * @param {PathItemsGetGlobalQueryNullOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
            let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
            // Validate
            try {
                if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
                    throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
                }
                if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
                    throw new Error('localStringQuery must be of type string.');
                }
                if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
                    throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
                }
                if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
                    throw new Error('pathItemStringQuery must be of type string.');
                }
                if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringQuery must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery';
            requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
            requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
            requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
            let queryParamsArray = [];
            if (localStringQuery !== null && localStringQuery !== undefined) {
                queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
            }
            if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
                queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
            }
            if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
                queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            httpRequest.body = null;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.pipeline(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorModel;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * send globalStringPath=globalStringPath,
     * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
     * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
     * localStringQuery=null
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     *
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     *
     * @param {PathItemsGetGlobalAndLocalQueryNullOptionalParams} [options]
     * Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
            let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
            // Validate
            try {
                if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
                    throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
                }
                if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
                    throw new Error('localStringQuery must be of type string.');
                }
                if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
                    throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
                }
                if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
                    throw new Error('pathItemStringQuery must be of type string.');
                }
                if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringQuery must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null';
            requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
            requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
            requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
            let queryParamsArray = [];
            if (localStringQuery !== null && localStringQuery !== undefined) {
                queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
            }
            if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
                queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
            }
            if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
                queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            httpRequest.body = null;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.pipeline(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorModel;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * send globalStringPath='globalStringPath',
     * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
     * globalStringQuery='globalStringQuery', pathItemStringQuery=null,
     * localStringQuery=null
     *
     * @param {string} localStringPath should contain value 'localStringPath'
     *
     * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
     * appears in the path
     *
     * @param {PathItemsGetLocalPathItemQueryNullOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
            let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
            // Validate
            try {
                if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
                    throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
                }
                if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
                    throw new Error('localStringQuery must be of type string.');
                }
                if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
                    throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
                }
                if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
                    throw new Error('pathItemStringQuery must be of type string.');
                }
                if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
                    throw new Error('this.client.globalStringQuery must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null';
            requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
            requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
            requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
            let queryParamsArray = [];
            if (localStringQuery !== null && localStringQuery !== undefined) {
                queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
            }
            if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
                queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
            }
            if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
                queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            httpRequest.body = null;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.pipeline(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorModel;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    getAllWithValues(localStringPath, pathItemStringPath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getGlobalQueryNull(localStringPath, pathItemStringPath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
}
exports.PathItems = PathItems;
//# sourceMappingURL=pathItems.js.map